name: 'Bump version'
description: 'Bumps the version number in root pom.xml along with all submodules'
inputs:
  bump:
    description: 'The part of the version number to bump (major, minor, patch)'
    required: true
outputs:
  version:
    value: ${{ steps.bump_version.outputs.version }}
    description: "The new version"
  was_bumped:
    value: ${{ steps.bump_version.outputs.was_bumped }}
    description: 'Whether the version was bumped or not'
runs:
  using: "composite"
  steps:
    - id: bump_version
      shell: bash
      run: |
        # Get current version
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        # Get the latest version bump commit message
        EXISTING_BUMP_COUNT=$(git log --grep="Release .* ${CURRENT_VERSION}" --pretty=format:"%s" | wc -l)
          
        if [[ "$EXISTING_BUMP_COUNT" -gt 0 ]]; then
          echo "The version ${CURRENT_VERSION} has already been bumped."
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "was_bumped=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Going to bump ${{ inputs.bump }} version from ${CURRENT_VERSION}."
        
        # Break down the version number into its components
        IFS='.-' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        
        # Check if the version was correctly broken down into parts
        if [[ "${#VERSION_PARTS[@]}" -lt 3 ]]; then
          echo "Error: Unable to parse version number ${CURRENT_VERSION}"
          exit 1
        fi
        
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        IS_SNAPSHOT=${VERSION_PARTS[3]}
        
        if [[ -z "$IS_SNAPSHOT" && "${{ inputs.bump }}" != 'snapshot' ]]; then
          echo "The version ${CURRENT_VERSION} is not snapshot, so it can be bumped only with snapshot bump."
          echo "We suppose there was error in previous run of workflow, therefore we do not bump here, so the process can continue idempotently."
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "was_bumped=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        SNAPSHOT=""
        
        case "${{ inputs.bump }}" in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
          ;;
          "patch")
          ;;
          "snapshot")
            PATCH=$((PATCH + 1))
            SNAPSHOT="-SNAPSHOT"
          ;;
          *)
          echo "Invalid bump type."
          exit 1
          ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH$SNAPSHOT"

        echo "bumped version is: ${NEW_VERSION}."
        # Set the new version in the POM files
        mvn versions:set -DnewVersion=$NEW_VERSION

        # Commit changes
        mvn versions:commit

        # Set output variable
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "was_bumped=true" >> $GITHUB_OUTPUT
