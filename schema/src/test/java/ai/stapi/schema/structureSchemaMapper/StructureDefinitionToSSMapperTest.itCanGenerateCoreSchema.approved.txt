{
  "definitions" : {
    "id" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "id",
      "description" : "Base StructureDefinition for id type: Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "string"
    },
    "BoxedId" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedId",
      "description" : "Base StructureDefinition for id type: Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "BoxedString",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedId",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedId",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "id",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Identifier" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Identifier",
      "description" : "Base StructureDefinition for Identifier Type: An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "period" : {
          "serializationType" : "FieldDefinition",
          "description" : "Time period during which identifier is/was valid for use.",
          "max" : "1",
          "min" : 0,
          "name" : "period",
          "parentDefinitionType" : "Identifier",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Period",
            "type" : "Period",
            "typeGroup" : "STANDARD"
          } ]
        },
        "system" : {
          "serializationType" : "FieldDefinition",
          "description" : "Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
          "max" : "1",
          "min" : 0,
          "name" : "system",
          "parentDefinitionType" : "Identifier",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.",
          "max" : "1",
          "min" : 0,
          "name" : "type",
          "parentDefinitionType" : "Identifier",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          } ]
        },
        "use" : {
          "serializationType" : "FieldDefinition",
          "description" : "The purpose of this identifier.",
          "max" : "1",
          "min" : 0,
          "name" : "use",
          "parentDefinitionType" : "Identifier",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "The portion of the identifier typically relevant to the user and which is unique within the context of the system.",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "Identifier",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "AggregateDefinition" : {
      "serializationType" : "ResourceStructureType",
      "definitionType" : "AggregateDefinition",
      "isAbstract" : false,
      "kind" : "resource",
      "parent" : "Resource",
      "description" : null,
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for inter-element referencing",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "AggregateDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "command" : {
          "serializationType" : "FieldDefinition",
          "description" : "Commands for this aggregate resource.",
          "max" : "*",
          "min" : 0,
          "name" : "command",
          "parentDefinitionType" : "AggregateDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "CommandHandlerDefinition",
            "type" : "CommandHandlerDefinition",
            "typeGroup" : "STANDARD"
          } ]
        },
        "description" : {
          "serializationType" : "FieldDefinition",
          "description" : "A description of the aggregate resource.",
          "max" : "1",
          "min" : 0,
          "name" : "description",
          "parentDefinitionType" : "AggregateDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "implicitRules" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "max" : "1",
          "min" : 0,
          "name" : "implicitRules",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The base language in which the resource is written.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "meta" : {
          "serializationType" : "FieldDefinition",
          "description" : "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "max" : "1",
          "min" : 0,
          "name" : "meta",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Meta",
            "type" : "Meta",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "Name for this aggregate definition (computer friendly).",
          "max" : "1",
          "min" : 0,
          "name" : "name",
          "parentDefinitionType" : "AggregateDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "structure" : {
          "serializationType" : "FieldDefinition",
          "description" : "Structure Definition of state of this Aggregate",
          "max" : "1",
          "min" : 1,
          "name" : "structure",
          "parentDefinitionType" : "AggregateDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "StructureDefinition",
            "typeGroup" : "REFERENCE"
          } ]
        }
      }
    },
    "BackboneElement" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "BackboneElement",
      "description" : "Base StructureDefinition for BackboneElement Type: Base definition for all elements that are defined inside a resource - but not those in a data type.",
      "isAbstract" : true,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedBase64Binary" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedBase64Binary",
      "description" : "Base StructureDefinition for base64Binary Type: A stream of bytes",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedBase64Binary",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedBase64Binary",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "base64Binary",
            "type" : "base64Binary",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedBoolean" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedBoolean",
      "description" : "Base StructureDefinition for boolean Type: Value of \"true\" or \"false\"",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedBoolean",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedBoolean",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedCanonical" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedCanonical",
      "description" : "Base StructureDefinition for canonical type: A URI that is a reference to a canonical URL on a FHIR resource",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "BoxedUri",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedCanonical",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedCanonical",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedCode" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedCode",
      "description" : "Base StructureDefinition for code type: A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "BoxedString",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedCode",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedCode",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedDate" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedDate",
      "description" : "Base StructureDefinition for date Type: A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedDate",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedDate",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "date",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedDateTime" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedDateTime",
      "description" : "Base StructureDefinition for dateTime Type: A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedDateTime",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedDateTime",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "dateTime",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedDecimal" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedDecimal",
      "description" : "Base StructureDefinition for decimal Type: A rational number with implicit precision",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedDecimal",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedDecimal",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "decimal",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedInstant" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedInstant",
      "description" : "Base StructureDefinition for instant Type: An instant in time - known at least to the second",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedInstant",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedInstant",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "instant",
            "type" : "instant",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedInteger" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedInteger",
      "description" : "Base StructureDefinition for integer Type: A whole number",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedInteger",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedInteger",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "integer",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedMarkdown" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedMarkdown",
      "description" : "Base StructureDefinition for markdown type: A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "BoxedString",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedMarkdown",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedMarkdown",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedOid" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedOid",
      "description" : "Base StructureDefinition for oid type: An OID represented as a URI",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "BoxedUri",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedOid",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedOid",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "oid",
            "type" : "oid",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedPositiveInt" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedPositiveInt",
      "description" : "Base StructureDefinition for positiveInt type: An integer with a value that is positive (e.g. >0)",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "BoxedInteger",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedPositiveInt",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedPositiveInt",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "positiveInt",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedString" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedString",
      "description" : "Base StructureDefinition for string Type: A sequence of Unicode characters",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedString",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedString",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedTime" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedTime",
      "description" : "Base StructureDefinition for time Type: A time during the day, with no date specified",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedTime",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedTime",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "time",
            "type" : "time",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedUnsignedInt" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedUnsignedInt",
      "description" : "Base StructureDefinition for unsignedInt type: An integer with a value that is not negative (e.g. >= 0)",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "BoxedInteger",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedUnsignedInt",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedUnsignedInt",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "unsignedInt",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedUri" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedUri",
      "description" : "Base StructureDefinition for uri Type: String of characters used to identify a name or a resource",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedUri",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedUri",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedUrl" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedUrl",
      "description" : "Base StructureDefinition for url type: A URI that is a literal reference",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "BoxedUri",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedUrl",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedUrl",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "url",
            "type" : "url",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedUuid" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedUuid",
      "description" : "Base StructureDefinition for uuid type: A UUID, represented as a URI",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "BoxedUri",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedUuid",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedUuid",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uuid",
            "type" : "uuid",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "BoxedXhtml" : {
      "serializationType" : "BoxedPrimitiveStructureType",
      "definitionType" : "BoxedXhtml",
      "description" : "Base StructureDefinition for xhtml Type",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Primitive value for BoxedXhtml",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "BoxedXhtml",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "xhtml",
            "type" : "xhtml",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "CodeableConcept" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "CodeableConcept",
      "description" : "Base StructureDefinition for CodeableConcept Type: A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "coding" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a code defined by a terminology system.",
          "max" : "*",
          "min" : 0,
          "name" : "coding",
          "parentDefinitionType" : "CodeableConcept",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "text" : {
          "serializationType" : "FieldDefinition",
          "description" : "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.",
          "max" : "1",
          "min" : 0,
          "name" : "text",
          "parentDefinitionType" : "CodeableConcept",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "CodeableReference" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "CodeableReference",
      "description" : "Base StructureDefinition for CodeableReference Type: A reference to a resource (by instance), or instead, a reference to a concept defined in a terminology or ontology (by class).",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "concept" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a concept - e.g. the information is identified by its general class to the degree of precision found in the terminology.",
          "max" : "1",
          "min" : 0,
          "name" : "concept",
          "parentDefinitionType" : "CodeableReference",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "reference" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a resource the provides exact details about the information being referenced.",
          "max" : "1",
          "min" : 0,
          "name" : "reference",
          "parentDefinitionType" : "CodeableReference",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "Reference",
            "typeGroup" : "REFERENCE"
          } ]
        }
      }
    },
    "Coding" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Coding",
      "description" : "Base StructureDefinition for Coding Type: A reference to a code defined by a terminology system.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
          "max" : "1",
          "min" : 0,
          "name" : "code",
          "parentDefinitionType" : "Coding",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "display" : {
          "serializationType" : "FieldDefinition",
          "description" : "A representation of the meaning of the code in the system, following the rules of the system.",
          "max" : "1",
          "min" : 0,
          "name" : "display",
          "parentDefinitionType" : "Coding",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "system" : {
          "serializationType" : "FieldDefinition",
          "description" : "The identification of the code system that defines the meaning of the symbol in the code.",
          "max" : "1",
          "min" : 0,
          "name" : "system",
          "parentDefinitionType" : "Coding",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "userSelected" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
          "max" : "1",
          "min" : 0,
          "name" : "userSelected",
          "parentDefinitionType" : "Coding",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "version" : {
          "serializationType" : "FieldDefinition",
          "description" : "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
          "max" : "1",
          "min" : 0,
          "name" : "version",
          "parentDefinitionType" : "Coding",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "CommandHandlerDefinition" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "CommandHandlerDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "description" : null,
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "creationalPolicy" : {
          "serializationType" : "FieldDefinition",
          "description" : "The creational policy for the resource.",
          "max" : "1",
          "min" : 0,
          "name" : "creationalPolicy",
          "parentDefinitionType" : "CommandHandlerDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "eventFactory" : {
          "serializationType" : "FieldDefinition",
          "description" : "Definition of events to fire.",
          "max" : "*",
          "min" : 0,
          "name" : "eventFactory",
          "parentDefinitionType" : "CommandHandlerDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "CommandHandlerDefinitionEventFactory",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "operation" : {
          "serializationType" : "FieldDefinition",
          "description" : "The operation to be executed.",
          "max" : "1",
          "min" : 0,
          "name" : "operation",
          "parentDefinitionType" : "CommandHandlerDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "OperationDefinition",
            "typeGroup" : "REFERENCE"
          } ]
        }
      }
    },
    "CommandHandlerDefinitionEventFactory" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "CommandHandlerDefinitionEventFactory",
      "description" : "Type for anonymous field contained in CommandHandlerDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "event" : {
          "serializationType" : "FieldDefinition",
          "description" : "The event to fire.",
          "max" : "1",
          "min" : 0,
          "name" : "event",
          "parentDefinitionType" : "CommandHandlerDefinitionEventFactory",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "EventMessageDefinition",
            "typeGroup" : "REFERENCE"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modification" : {
          "serializationType" : "FieldDefinition",
          "description" : "Specifies the modifications to be made to the aggregate.",
          "max" : "*",
          "min" : 0,
          "name" : "modification",
          "parentDefinitionType" : "CommandHandlerDefinitionEventFactory",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "CommandHandlerDefinitionEventFactoryModification",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "CommandHandlerDefinitionEventFactoryModification" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "CommandHandlerDefinitionEventFactoryModification",
      "description" : "Type for anonymous field contained in CommandHandlerDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "destinationIndexParameterName" : {
          "serializationType" : "FieldDefinition",
          "description" : "The parameter name on operation which will be used as destination index for insert and move",
          "max" : "1",
          "min" : 0,
          "name" : "destinationIndexParameterName",
          "parentDefinitionType" : "CommandHandlerDefinitionEventFactoryModification",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "inputValueParameterName" : {
          "serializationType" : "FieldDefinition",
          "description" : "The parameter name on operation which will be used as input value for modification.",
          "max" : "1",
          "min" : 0,
          "name" : "inputValueParameterName",
          "parentDefinitionType" : "CommandHandlerDefinitionEventFactoryModification",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "kind" : {
          "serializationType" : "FieldDefinition",
          "description" : "The kind of modification to be made. add | replace | move | remove | insert",
          "max" : "1",
          "min" : 1,
          "name" : "kind",
          "parentDefinitionType" : "CommandHandlerDefinitionEventFactoryModification",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modificationPath" : {
          "serializationType" : "FieldDefinition",
          "description" : "The path on aggregate structure where the modification will be applied.",
          "max" : "1",
          "min" : 1,
          "name" : "modificationPath",
          "parentDefinitionType" : "CommandHandlerDefinitionEventFactoryModification",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ContactDetail" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ContactDetail",
      "description" : "Base StructureDefinition for ContactDetail Type: Specifies contact information for a person or organization.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "The name of an individual to contact.",
          "max" : "1",
          "min" : 0,
          "name" : "name",
          "parentDefinitionType" : "ContactDetail",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "telecom" : {
          "serializationType" : "FieldDefinition",
          "description" : "The contact details for the individual (if a name was provided) or the organization.",
          "max" : "*",
          "min" : 0,
          "name" : "telecom",
          "parentDefinitionType" : "ContactDetail",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "ContactPoint",
            "type" : "ContactPoint",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ContactPoint" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ContactPoint",
      "description" : "Base StructureDefinition for ContactPoint Type: Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "period" : {
          "serializationType" : "FieldDefinition",
          "description" : "Time period when the contact point was/is in use.",
          "max" : "1",
          "min" : 0,
          "name" : "period",
          "parentDefinitionType" : "ContactPoint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Period",
            "type" : "Period",
            "typeGroup" : "STANDARD"
          } ]
        },
        "rank" : {
          "serializationType" : "FieldDefinition",
          "description" : "Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.",
          "max" : "1",
          "min" : 0,
          "name" : "rank",
          "parentDefinitionType" : "ContactPoint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "positiveInt",
            "typeGroup" : "STANDARD"
          } ]
        },
        "system" : {
          "serializationType" : "FieldDefinition",
          "description" : "Telecommunications form for contact point - what communications system is required to make use of the contact.",
          "max" : "1",
          "min" : 0,
          "name" : "system",
          "parentDefinitionType" : "ContactPoint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "use" : {
          "serializationType" : "FieldDefinition",
          "description" : "Identifies the purpose for the contact point.",
          "max" : "1",
          "min" : 0,
          "name" : "use",
          "parentDefinitionType" : "ContactPoint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "ContactPoint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "DataRequirement" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "DataRequirement",
      "description" : "Base StructureDefinition for DataRequirement Type: Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "codeFilter" : {
          "serializationType" : "FieldDefinition",
          "description" : "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.",
          "max" : "*",
          "min" : 0,
          "name" : "codeFilter",
          "parentDefinitionType" : "DataRequirement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "DataRequirementCodeFilter",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "dateFilter" : {
          "serializationType" : "FieldDefinition",
          "description" : "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.",
          "max" : "*",
          "min" : 0,
          "name" : "dateFilter",
          "parentDefinitionType" : "DataRequirement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "DataRequirementDateFilter",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "limit" : {
          "serializationType" : "FieldDefinition",
          "description" : "Specifies a maximum number of results that are required (uses the _count search parameter).",
          "max" : "1",
          "min" : 0,
          "name" : "limit",
          "parentDefinitionType" : "DataRequirement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "positiveInt",
            "typeGroup" : "STANDARD"
          } ]
        },
        "mustSupport" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. 

The value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).",
          "max" : "*",
          "min" : 0,
          "name" : "mustSupport",
          "parentDefinitionType" : "DataRequirement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "profile" : {
          "serializationType" : "FieldDefinition",
          "description" : "The profile of the required data, specified as the uri of the profile definition.",
          "max" : "*",
          "min" : 0,
          "name" : "profile",
          "parentDefinitionType" : "DataRequirement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "sort" : {
          "serializationType" : "FieldDefinition",
          "description" : "Specifies the order of the results to be returned.",
          "max" : "*",
          "min" : 0,
          "name" : "sort",
          "parentDefinitionType" : "DataRequirement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "DataRequirementSort",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "subject" : {
          "serializationType" : "FieldDefinition",
          "description" : "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
          "max" : "1",
          "min" : 0,
          "name" : "subject",
          "parentDefinitionType" : "DataRequirement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.",
          "max" : "1",
          "min" : 1,
          "name" : "type",
          "parentDefinitionType" : "DataRequirement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "DataRequirementCodeFilter" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "DataRequirementCodeFilter",
      "description" : "Type for anonymous field contained in DataRequirement",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.",
          "max" : "*",
          "min" : 0,
          "name" : "code",
          "parentDefinitionType" : "DataRequirementCodeFilter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "path" : {
          "serializationType" : "FieldDefinition",
          "description" : "The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.",
          "max" : "1",
          "min" : 0,
          "name" : "path",
          "parentDefinitionType" : "DataRequirementCodeFilter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "searchParam" : {
          "serializationType" : "FieldDefinition",
          "description" : "A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.",
          "max" : "1",
          "min" : 0,
          "name" : "searchParam",
          "parentDefinitionType" : "DataRequirementCodeFilter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "valueSet" : {
          "serializationType" : "FieldDefinition",
          "description" : "The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
          "max" : "1",
          "min" : 0,
          "name" : "valueSet",
          "parentDefinitionType" : "DataRequirementCodeFilter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "DataRequirementDateFilter" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "DataRequirementDateFilter",
      "description" : "Type for anonymous field contained in DataRequirement",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "path" : {
          "serializationType" : "FieldDefinition",
          "description" : "The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.",
          "max" : "1",
          "min" : 0,
          "name" : "path",
          "parentDefinitionType" : "DataRequirementDateFilter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "searchParam" : {
          "serializationType" : "FieldDefinition",
          "description" : "A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.",
          "max" : "1",
          "min" : 0,
          "name" : "searchParam",
          "parentDefinitionType" : "DataRequirementDateFilter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "DataRequirementDateFilter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Duration",
            "type" : "Duration",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Period",
            "type" : "Period",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "DataRequirementSort" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "DataRequirementSort",
      "description" : "Type for anonymous field contained in DataRequirement",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "direction" : {
          "serializationType" : "FieldDefinition",
          "description" : "The direction of the sort, ascending or descending.",
          "max" : "1",
          "min" : 1,
          "name" : "direction",
          "parentDefinitionType" : "DataRequirementSort",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "path" : {
          "serializationType" : "FieldDefinition",
          "description" : "The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.",
          "max" : "1",
          "min" : 1,
          "name" : "path",
          "parentDefinitionType" : "DataRequirementSort",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "DataType" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "DataType",
      "description" : "Base StructureDefinition for DataType Type: The base class for all re-useable types defined as part of the FHIR Specification.",
      "isAbstract" : true,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "DomainResource" : {
      "serializationType" : "ResourceStructureType",
      "definitionType" : "DomainResource",
      "description" : "A resource that includes narrative, extensions, and contained resources.",
      "isAbstract" : true,
      "kind" : "resource",
      "parent" : "Resource",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "contained" : {
          "serializationType" : "FieldDefinition",
          "description" : "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "max" : "*",
          "min" : 0,
          "name" : "contained",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Resource",
            "type" : "Resource",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "implicitRules" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "max" : "1",
          "min" : 0,
          "name" : "implicitRules",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The base language in which the resource is written.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "meta" : {
          "serializationType" : "FieldDefinition",
          "description" : "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "max" : "1",
          "min" : 0,
          "name" : "meta",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Meta",
            "type" : "Meta",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "text" : {
          "serializationType" : "FieldDefinition",
          "description" : "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "max" : "1",
          "min" : 0,
          "name" : "text",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Narrative",
            "type" : "Narrative",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Duration" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Duration",
      "description" : "Base StructureDefinition for Duration Type: A length of time.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Quantity",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "A computer processable form of the unit in some unit representation system.",
          "max" : "1",
          "min" : 0,
          "name" : "code",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "comparator" : {
          "serializationType" : "FieldDefinition",
          "description" : "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
          "max" : "1",
          "min" : 0,
          "name" : "comparator",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "system" : {
          "serializationType" : "FieldDefinition",
          "description" : "The identification of the system that provides the coded form of the unit.",
          "max" : "1",
          "min" : 0,
          "name" : "system",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "unit" : {
          "serializationType" : "FieldDefinition",
          "description" : "A human-readable form of the unit.",
          "max" : "1",
          "min" : 0,
          "name" : "unit",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "decimal",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Element" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Element",
      "description" : "Base StructureDefinition for Element Type: Base definition for all elements in a resource.",
      "isAbstract" : true,
      "kind" : "complex-type",
      "parent" : "",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ElementDefinition" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ElementDefinition",
      "description" : "Base StructureDefinition for ElementDefinition Type: Captures constraints on each element within the resource, profile, or extension.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "alias" : {
          "serializationType" : "FieldDefinition",
          "description" : "Identifies additional names by which this element might also be known.",
          "max" : "*",
          "min" : 0,
          "name" : "alias",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "base" : {
          "serializationType" : "FieldDefinition",
          "description" : "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.",
          "max" : "1",
          "min" : 0,
          "name" : "base",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "ElementDefinitionBase",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "binding" : {
          "serializationType" : "FieldDefinition",
          "description" : "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).",
          "max" : "1",
          "min" : 0,
          "name" : "binding",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "ElementDefinitionBinding",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "A code that has the same meaning as the element in a particular terminology.",
          "max" : "*",
          "min" : 0,
          "name" : "code",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          } ]
        },
        "comment" : {
          "serializationType" : "FieldDefinition",
          "description" : "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).",
          "max" : "1",
          "min" : 0,
          "name" : "comment",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "condition" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to an invariant that may make additional statements about the cardinality or value in the instance.",
          "max" : "*",
          "min" : 0,
          "name" : "condition",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "id",
            "typeGroup" : "STANDARD"
          } ]
        },
        "constraint" : {
          "serializationType" : "FieldDefinition",
          "description" : "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.",
          "max" : "*",
          "min" : 0,
          "name" : "constraint",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "ElementDefinitionConstraint",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "contentReference" : {
          "serializationType" : "FieldDefinition",
          "description" : "Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.",
          "max" : "1",
          "min" : 0,
          "name" : "contentReference",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "defaultValue" : {
          "serializationType" : "FieldDefinition",
          "description" : "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
          "max" : "1",
          "min" : 0,
          "name" : "defaultValue",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "base64Binary",
            "type" : "BoxedBase64Binary",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "BoxedBoolean",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "BoxedCanonical",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "BoxedCode",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "BoxedDate",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "BoxedDecimal",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "BoxedId",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "instant",
            "type" : "BoxedInstant",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "BoxedInteger",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "BoxedMarkdown",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "oid",
            "type" : "BoxedOid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "BoxedPositiveInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "BoxedString",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "time",
            "type" : "BoxedTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "BoxedUnsignedInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "BoxedUri",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "url",
            "type" : "BoxedUrl",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uuid",
            "type" : "BoxedUuid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableReference",
            "type" : "CodeableReference",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "DataRequirement",
            "type" : "DataRequirement",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Expression",
            "type" : "Expression",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Identifier",
            "type" : "Identifier",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "ParameterDefinition",
            "type" : "ParameterDefinition",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "Reference",
            "typeGroup" : "REFERENCE"
          }, {
            "isContentReferenced" : false,
            "originalType" : "TriggerDefinition",
            "type" : "TriggerDefinition",
            "typeGroup" : "STANDARD"
          } ]
        },
        "definition" : {
          "serializationType" : "FieldDefinition",
          "description" : "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).",
          "max" : "1",
          "min" : 0,
          "name" : "definition",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "example" : {
          "serializationType" : "FieldDefinition",
          "description" : "A sample value for this element demonstrating the type of information that would typically be found in the element.",
          "max" : "*",
          "min" : 0,
          "name" : "example",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "ElementDefinitionExample",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "fixed" : {
          "serializationType" : "FieldDefinition",
          "description" : "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
          "max" : "1",
          "min" : 0,
          "name" : "fixed",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "base64Binary",
            "type" : "BoxedBase64Binary",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "BoxedBoolean",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "BoxedCanonical",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "BoxedCode",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "BoxedDate",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "BoxedDecimal",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "BoxedId",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "instant",
            "type" : "BoxedInstant",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "BoxedInteger",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "BoxedMarkdown",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "oid",
            "type" : "BoxedOid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "BoxedPositiveInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "BoxedString",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "time",
            "type" : "BoxedTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "BoxedUnsignedInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "BoxedUri",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "url",
            "type" : "BoxedUrl",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uuid",
            "type" : "BoxedUuid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableReference",
            "type" : "CodeableReference",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "DataRequirement",
            "type" : "DataRequirement",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Expression",
            "type" : "Expression",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Identifier",
            "type" : "Identifier",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "ParameterDefinition",
            "type" : "ParameterDefinition",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "Reference",
            "typeGroup" : "REFERENCE"
          }, {
            "isContentReferenced" : false,
            "originalType" : "TriggerDefinition",
            "type" : "TriggerDefinition",
            "typeGroup" : "STANDARD"
          } ]
        },
        "isModifier" : {
          "serializationType" : "FieldDefinition",
          "description" : "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.",
          "max" : "1",
          "min" : 0,
          "name" : "isModifier",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "isModifierReason" : {
          "serializationType" : "FieldDefinition",
          "description" : "Explains how that element affects the interpretation of the resource or element that contains it.",
          "max" : "1",
          "min" : 0,
          "name" : "isModifierReason",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "isSummary" : {
          "serializationType" : "FieldDefinition",
          "description" : "Whether the element should be included if a client requests a search with the parameter _summary=true.",
          "max" : "1",
          "min" : 0,
          "name" : "isSummary",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "label" : {
          "serializationType" : "FieldDefinition",
          "description" : "A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.",
          "max" : "1",
          "min" : 0,
          "name" : "label",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "mapping" : {
          "serializationType" : "FieldDefinition",
          "description" : "Identifies a concept from an external specification that roughly corresponds to this element.",
          "max" : "*",
          "min" : 0,
          "name" : "mapping",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "ElementDefinitionMapping",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "max" : {
          "serializationType" : "FieldDefinition",
          "description" : "The maximum number of times this element is permitted to appear in the instance.",
          "max" : "1",
          "min" : 0,
          "name" : "max",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "maxLength" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.",
          "max" : "1",
          "min" : 0,
          "name" : "maxLength",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "integer",
            "typeGroup" : "STANDARD"
          } ]
        },
        "maxValue" : {
          "serializationType" : "FieldDefinition",
          "description" : "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "max" : "1",
          "min" : 0,
          "name" : "maxValue",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "BoxedDate",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "BoxedDecimal",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "instant",
            "type" : "BoxedInstant",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "BoxedInteger",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "BoxedPositiveInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "time",
            "type" : "BoxedTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "BoxedUnsignedInt",
            "typeGroup" : "BOXED"
          } ]
        },
        "meaningWhenMissing" : {
          "serializationType" : "FieldDefinition",
          "description" : "The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').",
          "max" : "1",
          "min" : 0,
          "name" : "meaningWhenMissing",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "min" : {
          "serializationType" : "FieldDefinition",
          "description" : "The minimum number of times this element SHALL appear in the instance.",
          "max" : "1",
          "min" : 0,
          "name" : "min",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "unsignedInt",
            "typeGroup" : "STANDARD"
          } ]
        },
        "minValue" : {
          "serializationType" : "FieldDefinition",
          "description" : "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
          "max" : "1",
          "min" : 0,
          "name" : "minValue",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "BoxedDate",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "BoxedDecimal",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "instant",
            "type" : "BoxedInstant",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "BoxedInteger",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "BoxedPositiveInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "time",
            "type" : "BoxedTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "BoxedUnsignedInt",
            "typeGroup" : "BOXED"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "mustSupport" : {
          "serializationType" : "FieldDefinition",
          "description" : "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.",
          "max" : "1",
          "min" : 0,
          "name" : "mustSupport",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "orderMeaning" : {
          "serializationType" : "FieldDefinition",
          "description" : "If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.",
          "max" : "1",
          "min" : 0,
          "name" : "orderMeaning",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "path" : {
          "serializationType" : "FieldDefinition",
          "description" : "The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension.",
          "max" : "1",
          "min" : 1,
          "name" : "path",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "pattern" : {
          "serializationType" : "FieldDefinition",
          "description" : "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  

When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.

When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.

When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,

1. If primitive: it must match exactly the pattern value
2. If a complex object: it must match (recursively) the pattern value
3. If an array: it must match (recursively) the pattern value.",
          "max" : "1",
          "min" : 0,
          "name" : "pattern",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "base64Binary",
            "type" : "BoxedBase64Binary",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "BoxedBoolean",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "BoxedCanonical",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "BoxedCode",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "BoxedDate",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "BoxedDecimal",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "BoxedId",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "instant",
            "type" : "BoxedInstant",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "BoxedInteger",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "BoxedMarkdown",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "oid",
            "type" : "BoxedOid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "BoxedPositiveInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "BoxedString",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "time",
            "type" : "BoxedTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "BoxedUnsignedInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "BoxedUri",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "url",
            "type" : "BoxedUrl",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uuid",
            "type" : "BoxedUuid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableReference",
            "type" : "CodeableReference",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "DataRequirement",
            "type" : "DataRequirement",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Expression",
            "type" : "Expression",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Identifier",
            "type" : "Identifier",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "ParameterDefinition",
            "type" : "ParameterDefinition",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "Reference",
            "typeGroup" : "REFERENCE"
          }, {
            "isContentReferenced" : false,
            "originalType" : "TriggerDefinition",
            "type" : "TriggerDefinition",
            "typeGroup" : "STANDARD"
          } ]
        },
        "representation" : {
          "serializationType" : "FieldDefinition",
          "description" : "Codes that define how this element is represented in instances, when the deviation varies from the normal case.",
          "max" : "*",
          "min" : 0,
          "name" : "representation",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "requirements" : {
          "serializationType" : "FieldDefinition",
          "description" : "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.",
          "max" : "1",
          "min" : 0,
          "name" : "requirements",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "short" : {
          "serializationType" : "FieldDefinition",
          "description" : "A concise description of what this element means (e.g. for use in autogenerated summaries).",
          "max" : "1",
          "min" : 0,
          "name" : "short",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "sliceIsConstraining" : {
          "serializationType" : "FieldDefinition",
          "description" : "If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.",
          "max" : "1",
          "min" : 0,
          "name" : "sliceIsConstraining",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "sliceName" : {
          "serializationType" : "FieldDefinition",
          "description" : "The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.",
          "max" : "1",
          "min" : 0,
          "name" : "sliceName",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "slicing" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).",
          "max" : "1",
          "min" : 0,
          "name" : "slicing",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "ElementDefinitionSlicing",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "The data type or resource that the value of this element is permitted to be.",
          "max" : "*",
          "min" : 0,
          "name" : "type",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "ElementDefinitionType",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "typeReference" : {
          "serializationType" : "FieldDefinition",
          "description" : "Reference to Data type or Resource that is a(or the) type used for this element. e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.",
          "max" : "1",
          "min" : 0,
          "name" : "typeReference",
          "parentDefinitionType" : "ElementDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "StructureDefinition",
            "typeGroup" : "REFERENCE"
          } ]
        }
      }
    },
    "ElementDefinitionBase" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ElementDefinitionBase",
      "description" : "Type for anonymous field contained in ElementDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "max" : {
          "serializationType" : "FieldDefinition",
          "description" : "Maximum cardinality of the base element identified by the path.",
          "max" : "1",
          "min" : 1,
          "name" : "max",
          "parentDefinitionType" : "ElementDefinitionBase",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "min" : {
          "serializationType" : "FieldDefinition",
          "description" : "Minimum cardinality of the base element identified by the path.",
          "max" : "1",
          "min" : 1,
          "name" : "min",
          "parentDefinitionType" : "ElementDefinitionBase",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "unsignedInt",
            "typeGroup" : "STANDARD"
          } ]
        },
        "path" : {
          "serializationType" : "FieldDefinition",
          "description" : "The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.",
          "max" : "1",
          "min" : 1,
          "name" : "path",
          "parentDefinitionType" : "ElementDefinitionBase",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ElementDefinitionBinding" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ElementDefinitionBinding",
      "description" : "Type for anonymous field contained in ElementDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "description" : {
          "serializationType" : "FieldDefinition",
          "description" : "Describes the intended use of this particular set of codes.",
          "max" : "1",
          "min" : 0,
          "name" : "description",
          "parentDefinitionType" : "ElementDefinitionBinding",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "strength" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
          "max" : "1",
          "min" : 1,
          "name" : "strength",
          "parentDefinitionType" : "ElementDefinitionBinding",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "valueSet" : {
          "serializationType" : "FieldDefinition",
          "description" : "Refers to the value set that identifies the set of codes the binding refers to.",
          "max" : "1",
          "min" : 0,
          "name" : "valueSet",
          "parentDefinitionType" : "ElementDefinitionBinding",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ElementDefinitionConstraint" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ElementDefinitionConstraint",
      "description" : "Type for anonymous field contained in ElementDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "expression" : {
          "serializationType" : "FieldDefinition",
          "description" : "A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.",
          "max" : "1",
          "min" : 0,
          "name" : "expression",
          "parentDefinitionType" : "ElementDefinitionConstraint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "human" : {
          "serializationType" : "FieldDefinition",
          "description" : "Text that can be used to describe the constraint in messages identifying that the constraint has been violated.",
          "max" : "1",
          "min" : 1,
          "name" : "human",
          "parentDefinitionType" : "ElementDefinitionConstraint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "key" : {
          "serializationType" : "FieldDefinition",
          "description" : "Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.",
          "max" : "1",
          "min" : 1,
          "name" : "key",
          "parentDefinitionType" : "ElementDefinitionConstraint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "id",
            "typeGroup" : "STANDARD"
          } ]
        },
        "requirements" : {
          "serializationType" : "FieldDefinition",
          "description" : "Description of why this constraint is necessary or appropriate.",
          "max" : "1",
          "min" : 0,
          "name" : "requirements",
          "parentDefinitionType" : "ElementDefinitionConstraint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "severity" : {
          "serializationType" : "FieldDefinition",
          "description" : "Identifies the impact constraint violation has on the conformance of the instance.",
          "max" : "1",
          "min" : 1,
          "name" : "severity",
          "parentDefinitionType" : "ElementDefinitionConstraint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "source" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to the original source of the constraint, for traceability purposes.",
          "max" : "1",
          "min" : 0,
          "name" : "source",
          "parentDefinitionType" : "ElementDefinitionConstraint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "xpath" : {
          "serializationType" : "FieldDefinition",
          "description" : "An XPath expression of constraint that can be executed to see if this constraint is met.",
          "max" : "1",
          "min" : 0,
          "name" : "xpath",
          "parentDefinitionType" : "ElementDefinitionConstraint",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ElementDefinitionExample" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ElementDefinitionExample",
      "description" : "Type for anonymous field contained in ElementDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "label" : {
          "serializationType" : "FieldDefinition",
          "description" : "Describes the purpose of this example amoung the set of examples.",
          "max" : "1",
          "min" : 1,
          "name" : "label",
          "parentDefinitionType" : "ElementDefinitionExample",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "The actual value for the element, which must be one of the types allowed for this element.",
          "max" : "1",
          "min" : 1,
          "name" : "value",
          "parentDefinitionType" : "ElementDefinitionExample",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "base64Binary",
            "type" : "BoxedBase64Binary",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "BoxedBoolean",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "BoxedCanonical",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "BoxedCode",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "BoxedDate",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "BoxedDecimal",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "BoxedId",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "instant",
            "type" : "BoxedInstant",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "BoxedInteger",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "BoxedMarkdown",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "oid",
            "type" : "BoxedOid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "BoxedPositiveInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "BoxedString",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "time",
            "type" : "BoxedTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "BoxedUnsignedInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "BoxedUri",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "url",
            "type" : "BoxedUrl",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uuid",
            "type" : "BoxedUuid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableReference",
            "type" : "CodeableReference",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "DataRequirement",
            "type" : "DataRequirement",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Expression",
            "type" : "Expression",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Identifier",
            "type" : "Identifier",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "ParameterDefinition",
            "type" : "ParameterDefinition",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "Reference",
            "typeGroup" : "REFERENCE"
          }, {
            "isContentReferenced" : false,
            "originalType" : "TriggerDefinition",
            "type" : "TriggerDefinition",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ElementDefinitionMapping" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ElementDefinitionMapping",
      "description" : "Type for anonymous field contained in ElementDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "comment" : {
          "serializationType" : "FieldDefinition",
          "description" : "Comments that provide information about the mapping or its use.",
          "max" : "1",
          "min" : 0,
          "name" : "comment",
          "parentDefinitionType" : "ElementDefinitionMapping",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "identity" : {
          "serializationType" : "FieldDefinition",
          "description" : "An internal reference to the definition of a mapping.",
          "max" : "1",
          "min" : 1,
          "name" : "identity",
          "parentDefinitionType" : "ElementDefinitionMapping",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "id",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "Identifies the computable language in which mapping.map is expressed.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "ElementDefinitionMapping",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "map" : {
          "serializationType" : "FieldDefinition",
          "description" : "Expresses what part of the target specification corresponds to this element.",
          "max" : "1",
          "min" : 1,
          "name" : "map",
          "parentDefinitionType" : "ElementDefinitionMapping",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ElementDefinitionSlicing" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ElementDefinitionSlicing",
      "description" : "Type for anonymous field contained in ElementDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "description" : {
          "serializationType" : "FieldDefinition",
          "description" : "A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.",
          "max" : "1",
          "min" : 0,
          "name" : "description",
          "parentDefinitionType" : "ElementDefinitionSlicing",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "discriminator" : {
          "serializationType" : "FieldDefinition",
          "description" : "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.",
          "max" : "*",
          "min" : 0,
          "name" : "discriminator",
          "parentDefinitionType" : "ElementDefinitionSlicing",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "ElementDefinitionSlicingDiscriminator",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "ordered" : {
          "serializationType" : "FieldDefinition",
          "description" : "If the matching elements have to occur in the same order as defined in the profile.",
          "max" : "1",
          "min" : 0,
          "name" : "ordered",
          "parentDefinitionType" : "ElementDefinitionSlicing",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "rules" : {
          "serializationType" : "FieldDefinition",
          "description" : "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.",
          "max" : "1",
          "min" : 1,
          "name" : "rules",
          "parentDefinitionType" : "ElementDefinitionSlicing",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ElementDefinitionSlicingDiscriminator" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ElementDefinitionSlicingDiscriminator",
      "description" : "Type for anonymous field contained in ElementDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "path" : {
          "serializationType" : "FieldDefinition",
          "description" : "A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.",
          "max" : "1",
          "min" : 1,
          "name" : "path",
          "parentDefinitionType" : "ElementDefinitionSlicingDiscriminator",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "How the element value is interpreted when discrimination is evaluated.",
          "max" : "1",
          "min" : 1,
          "name" : "type",
          "parentDefinitionType" : "ElementDefinitionSlicingDiscriminator",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ElementDefinitionType" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ElementDefinitionType",
      "description" : "Type for anonymous field contained in ElementDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "aggregation" : {
          "serializationType" : "FieldDefinition",
          "description" : "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.",
          "max" : "*",
          "min" : 0,
          "name" : "aggregation",
          "parentDefinitionType" : "ElementDefinitionType",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.",
          "max" : "1",
          "min" : 1,
          "name" : "code",
          "parentDefinitionType" : "ElementDefinitionType",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "profile" : {
          "serializationType" : "FieldDefinition",
          "description" : "Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.",
          "max" : "*",
          "min" : 0,
          "name" : "profile",
          "parentDefinitionType" : "ElementDefinitionType",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "targetProfile" : {
          "serializationType" : "FieldDefinition",
          "description" : "Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.",
          "max" : "*",
          "min" : 0,
          "name" : "targetProfile",
          "parentDefinitionType" : "ElementDefinitionType",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "versioning" : {
          "serializationType" : "FieldDefinition",
          "description" : "Whether this reference needs to be version specific or version independent, or whether either can be used.",
          "max" : "1",
          "min" : 0,
          "name" : "versioning",
          "parentDefinitionType" : "ElementDefinitionType",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "EventMessageDefinition" : {
      "serializationType" : "ResourceStructureType",
      "definitionType" : "EventMessageDefinition",
      "isAbstract" : false,
      "kind" : "resource",
      "parent" : "Resource",
      "description" : null,
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Name/Type for this event definition (computer friendly)",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "EventMessageDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "description" : {
          "serializationType" : "FieldDefinition",
          "description" : "A description of the event definition.",
          "max" : "1",
          "min" : 0,
          "name" : "description",
          "parentDefinitionType" : "EventMessageDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "implicitRules" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "max" : "1",
          "min" : 0,
          "name" : "implicitRules",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The base language in which the resource is written.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "meta" : {
          "serializationType" : "FieldDefinition",
          "description" : "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "max" : "1",
          "min" : 0,
          "name" : "meta",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Meta",
            "type" : "Meta",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "Name for this event definition (user friendly)",
          "max" : "1",
          "min" : 0,
          "name" : "name",
          "parentDefinitionType" : "EventMessageDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "The type of event to fire.",
          "max" : "1",
          "min" : 0,
          "name" : "type",
          "parentDefinitionType" : "EventMessageDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "StructureDefinition",
            "typeGroup" : "REFERENCE"
          } ]
        }
      }
    },
    "Expression" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Expression",
      "description" : "Base StructureDefinition for Expression Type: A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "description" : {
          "serializationType" : "FieldDefinition",
          "description" : "A brief, natural language description of the condition that effectively communicates the intended semantics.",
          "max" : "1",
          "min" : 0,
          "name" : "description",
          "parentDefinitionType" : "Expression",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "expression" : {
          "serializationType" : "FieldDefinition",
          "description" : "An expression in the specified language that returns a value.",
          "max" : "1",
          "min" : 0,
          "name" : "expression",
          "parentDefinitionType" : "Expression",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The media type of the language for the expression.",
          "max" : "1",
          "min" : 1,
          "name" : "language",
          "parentDefinitionType" : "Expression",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.",
          "max" : "1",
          "min" : 0,
          "name" : "name",
          "parentDefinitionType" : "Expression",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "id",
            "typeGroup" : "STANDARD"
          } ]
        },
        "reference" : {
          "serializationType" : "FieldDefinition",
          "description" : "A URI that defines where the expression is found.",
          "max" : "1",
          "min" : 0,
          "name" : "reference",
          "parentDefinitionType" : "Expression",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Extension" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Extension",
      "description" : "Base StructureDefinition for Extension Type: Optional Extension Element - found in all resources.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "url" : {
          "serializationType" : "FieldDefinition",
          "description" : "Source of the definition for the extension code - a logical name or a URL.",
          "max" : "1",
          "min" : 1,
          "name" : "url",
          "parentDefinitionType" : "Extension",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "Extension",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "base64Binary",
            "type" : "BoxedBase64Binary",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "BoxedBoolean",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "BoxedCanonical",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "BoxedCode",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "BoxedDate",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "BoxedDecimal",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "BoxedId",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "instant",
            "type" : "BoxedInstant",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "BoxedInteger",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "BoxedMarkdown",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "oid",
            "type" : "BoxedOid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "BoxedPositiveInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "BoxedString",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "time",
            "type" : "BoxedTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "BoxedUnsignedInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "BoxedUri",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "url",
            "type" : "BoxedUrl",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uuid",
            "type" : "BoxedUuid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableReference",
            "type" : "CodeableReference",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "DataRequirement",
            "type" : "DataRequirement",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Expression",
            "type" : "Expression",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Identifier",
            "type" : "Identifier",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "ParameterDefinition",
            "type" : "ParameterDefinition",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Period",
            "type" : "Period",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Quantity",
            "type" : "Quantity",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "Reference",
            "typeGroup" : "REFERENCE"
          }, {
            "isContentReferenced" : false,
            "originalType" : "SimpleQuantity",
            "type" : "SimpleQuantity",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "TriggerDefinition",
            "type" : "TriggerDefinition",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Meta" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Meta",
      "description" : "Base StructureDefinition for Meta Type: The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "versionId" : {
          "serializationType" : "FieldDefinition",
          "description" : "The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.",
          "max" : "1",
          "min" : 0,
          "name" : "versionId",
          "parentDefinitionType" : "Meta",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "id",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "lastUpdated" : {
          "serializationType" : "FieldDefinition",
          "description" : "When the resource last changed - e.g. when the version changed.",
          "max" : "1",
          "min" : 0,
          "name" : "lastUpdated",
          "parentDefinitionType" : "Meta",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "instant",
            "type" : "instant",
            "typeGroup" : "STANDARD"
          } ]
        },
        "profile" : {
          "serializationType" : "FieldDefinition",
          "description" : "A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](structuredefinition-definitions.html#StructureDefinition.url).",
          "max" : "*",
          "min" : 0,
          "name" : "profile",
          "parentDefinitionType" : "Meta",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "security" : {
          "serializationType" : "FieldDefinition",
          "description" : "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.",
          "max" : "*",
          "min" : 0,
          "name" : "security",
          "parentDefinitionType" : "Meta",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          } ]
        },
        "source" : {
          "serializationType" : "FieldDefinition",
          "description" : "A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.",
          "max" : "1",
          "min" : 0,
          "name" : "source",
          "parentDefinitionType" : "Meta",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "tag" : {
          "serializationType" : "FieldDefinition",
          "description" : "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.",
          "max" : "*",
          "min" : 0,
          "name" : "tag",
          "parentDefinitionType" : "Meta",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Narrative" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Narrative",
      "description" : "Base StructureDefinition for Narrative Type: A human-readable summary of the resource conveying the essential clinical and business information for the resource.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "div" : {
          "serializationType" : "FieldDefinition",
          "description" : "The actual narrative content, a stripped down version of XHTML.",
          "max" : "1",
          "min" : 1,
          "name" : "div",
          "parentDefinitionType" : "Narrative",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "xhtml",
            "type" : "xhtml",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "status" : {
          "serializationType" : "FieldDefinition",
          "description" : "The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.",
          "max" : "1",
          "min" : 1,
          "name" : "status",
          "parentDefinitionType" : "Narrative",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "OperationDefinition" : {
      "serializationType" : "ResourceStructureType",
      "definitionType" : "OperationDefinition",
      "description" : "A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).",
      "isAbstract" : false,
      "kind" : "resource",
      "parent" : "DomainResource",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "affectsState" : {
          "serializationType" : "FieldDefinition",
          "description" : "Whether the operation affects state. Side effects such as producing audit trail entries do not count as 'affecting  state'.",
          "max" : "1",
          "min" : 0,
          "name" : "affectsState",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "base" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates that this operation definition is a constraining profile on the base.",
          "max" : "1",
          "min" : 0,
          "name" : "base",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "The name used to invoke the operation.",
          "max" : "1",
          "min" : 1,
          "name" : "code",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "comment" : {
          "serializationType" : "FieldDefinition",
          "description" : "Additional information about how to use this operation or named query.",
          "max" : "1",
          "min" : 0,
          "name" : "comment",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "contact" : {
          "serializationType" : "FieldDefinition",
          "description" : "Contact details to assist a user in finding and communicating with the publisher.",
          "max" : "*",
          "min" : 0,
          "name" : "contact",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "contained" : {
          "serializationType" : "FieldDefinition",
          "description" : "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "max" : "*",
          "min" : 0,
          "name" : "contained",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Resource",
            "type" : "Resource",
            "typeGroup" : "STANDARD"
          } ]
        },
        "date" : {
          "serializationType" : "FieldDefinition",
          "description" : "The date  (and optionally time) when the operation definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.",
          "max" : "1",
          "min" : 0,
          "name" : "date",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "dateTime",
            "typeGroup" : "STANDARD"
          } ]
        },
        "description" : {
          "serializationType" : "FieldDefinition",
          "description" : "A free text natural language description of the operation definition from a consumer's perspective.",
          "max" : "1",
          "min" : 0,
          "name" : "description",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "experimental" : {
          "serializationType" : "FieldDefinition",
          "description" : "A Boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
          "max" : "1",
          "min" : 0,
          "name" : "experimental",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "implicitRules" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "max" : "1",
          "min" : 0,
          "name" : "implicitRules",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "inputProfile" : {
          "serializationType" : "FieldDefinition",
          "description" : "Additional validation information for the in parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource as a whole.",
          "max" : "1",
          "min" : 0,
          "name" : "inputProfile",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "instance" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates whether this operation can be invoked on a particular instance of one of the given types.",
          "max" : "1",
          "min" : 1,
          "name" : "instance",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "jurisdiction" : {
          "serializationType" : "FieldDefinition",
          "description" : "A legal or geographic region in which the operation definition is intended to be used.",
          "max" : "*",
          "min" : 0,
          "name" : "jurisdiction",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          } ]
        },
        "kind" : {
          "serializationType" : "FieldDefinition",
          "description" : "Whether this is an operation or a named query.",
          "max" : "1",
          "min" : 1,
          "name" : "kind",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The base language in which the resource is written.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "meta" : {
          "serializationType" : "FieldDefinition",
          "description" : "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "max" : "1",
          "min" : 0,
          "name" : "meta",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Meta",
            "type" : "Meta",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "max" : "1",
          "min" : 1,
          "name" : "name",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "outputProfile" : {
          "serializationType" : "FieldDefinition",
          "description" : "Additional validation information for the out parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource.",
          "max" : "1",
          "min" : 0,
          "name" : "outputProfile",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "overload" : {
          "serializationType" : "FieldDefinition",
          "description" : "Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.",
          "max" : "*",
          "min" : 0,
          "name" : "overload",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "OperationDefinitionOverload",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "parameter" : {
          "serializationType" : "FieldDefinition",
          "description" : "The parameters for the operation/query.",
          "max" : "*",
          "min" : 0,
          "name" : "parameter",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "OperationDefinitionParameter",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "publisher" : {
          "serializationType" : "FieldDefinition",
          "description" : "The name of the organization or individual that published the operation definition.",
          "max" : "1",
          "min" : 0,
          "name" : "publisher",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "purpose" : {
          "serializationType" : "FieldDefinition",
          "description" : "Explanation of why this operation definition is needed and why it has been designed as it has.",
          "max" : "1",
          "min" : 0,
          "name" : "purpose",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "resource" : {
          "serializationType" : "FieldDefinition",
          "description" : "The types on which this operation can be executed.",
          "max" : "*",
          "min" : 0,
          "name" : "resource",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "status" : {
          "serializationType" : "FieldDefinition",
          "description" : "The status of this operation definition. Enables tracking the life-cycle of the content.",
          "max" : "1",
          "min" : 1,
          "name" : "status",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "system" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).",
          "max" : "1",
          "min" : 1,
          "name" : "system",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "text" : {
          "serializationType" : "FieldDefinition",
          "description" : "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "max" : "1",
          "min" : 0,
          "name" : "text",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Narrative",
            "type" : "Narrative",
            "typeGroup" : "STANDARD"
          } ]
        },
        "title" : {
          "serializationType" : "FieldDefinition",
          "description" : "A short, descriptive, user-friendly title for the operation definition.",
          "max" : "1",
          "min" : 0,
          "name" : "title",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).",
          "max" : "1",
          "min" : 1,
          "name" : "type",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "url" : {
          "serializationType" : "FieldDefinition",
          "description" : "An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this operation definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the operation definition is stored on different servers.",
          "max" : "1",
          "min" : 0,
          "name" : "url",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "useContext" : {
          "serializationType" : "FieldDefinition",
          "description" : "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate operation definition instances.",
          "max" : "*",
          "min" : 0,
          "name" : "useContext",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "UsageContext",
            "type" : "UsageContext",
            "typeGroup" : "STANDARD"
          } ]
        },
        "version" : {
          "serializationType" : "FieldDefinition",
          "description" : "The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
          "max" : "1",
          "min" : 0,
          "name" : "version",
          "parentDefinitionType" : "OperationDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "OperationDefinitionOverload" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "OperationDefinitionOverload",
      "description" : "Type for anonymous field contained in OperationDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "comment" : {
          "serializationType" : "FieldDefinition",
          "description" : "Comments to go on overload.",
          "max" : "1",
          "min" : 0,
          "name" : "comment",
          "parentDefinitionType" : "OperationDefinitionOverload",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "parameterName" : {
          "serializationType" : "FieldDefinition",
          "description" : "Name of parameter to include in overload.",
          "max" : "*",
          "min" : 0,
          "name" : "parameterName",
          "parentDefinitionType" : "OperationDefinitionOverload",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "OperationDefinitionParameter" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "OperationDefinitionParameter",
      "description" : "Type for anonymous field contained in OperationDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "binding" : {
          "serializationType" : "FieldDefinition",
          "description" : "Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).",
          "max" : "1",
          "min" : 0,
          "name" : "binding",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "OperationDefinitionParameterBinding",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "documentation" : {
          "serializationType" : "FieldDefinition",
          "description" : "Describes the meaning or use of this parameter.",
          "max" : "1",
          "min" : 0,
          "name" : "documentation",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "max" : {
          "serializationType" : "FieldDefinition",
          "description" : "The maximum number of times this element is permitted to appear in the request or response.",
          "max" : "1",
          "min" : 1,
          "name" : "max",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "min" : {
          "serializationType" : "FieldDefinition",
          "description" : "The minimum number of times this parameter SHALL appear in the request or response.",
          "max" : "1",
          "min" : 1,
          "name" : "min",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "integer",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "The name of used to identify the parameter.",
          "max" : "1",
          "min" : 1,
          "name" : "name",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "part" : {
          "serializationType" : "FieldDefinition",
          "description" : "The parts of a nested Parameter.",
          "max" : "*",
          "min" : 0,
          "name" : "part",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : true,
            "originalType" : "BackboneElement",
            "type" : "OperationDefinitionParameter",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "referencedFrom" : {
          "serializationType" : "FieldDefinition",
          "description" : "Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.",
          "max" : "*",
          "min" : 0,
          "name" : "referencedFrom",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "OperationDefinitionParameterReferencedFrom",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "searchType" : {
          "serializationType" : "FieldDefinition",
          "description" : "How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.",
          "max" : "1",
          "min" : 0,
          "name" : "searchType",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "targetProfile" : {
          "serializationType" : "FieldDefinition",
          "description" : "Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.",
          "max" : "*",
          "min" : 0,
          "name" : "targetProfile",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "targetProfileReference" : {
          "serializationType" : "FieldDefinition",
          "description" : "If type is Reference | canonical, allowed targets. If type is 'Resource', then this constrains the allowed resource types",
          "max" : "*",
          "min" : 0,
          "name" : "targetProfileReference",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "StructureDefinition",
            "typeGroup" : "REFERENCE"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "The type for this parameter.",
          "max" : "1",
          "min" : 0,
          "name" : "type",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "use" : {
          "serializationType" : "FieldDefinition",
          "description" : "Whether this is an input or an output parameter.",
          "max" : "1",
          "min" : 1,
          "name" : "use",
          "parentDefinitionType" : "OperationDefinitionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "OperationDefinitionParameterBinding" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "OperationDefinitionParameterBinding",
      "description" : "Type for anonymous field contained in OperationDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "strength" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
          "max" : "1",
          "min" : 1,
          "name" : "strength",
          "parentDefinitionType" : "OperationDefinitionParameterBinding",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "valueSet" : {
          "serializationType" : "FieldDefinition",
          "description" : "Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.",
          "max" : "1",
          "min" : 1,
          "name" : "valueSet",
          "parentDefinitionType" : "OperationDefinitionParameterBinding",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "OperationDefinitionParameterReferencedFrom" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "OperationDefinitionParameterReferencedFrom",
      "description" : "Type for anonymous field contained in OperationDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "sourceId" : {
          "serializationType" : "FieldDefinition",
          "description" : "The id of the element in the referencing resource that is expected to resolve to this resource.",
          "max" : "1",
          "min" : 0,
          "name" : "sourceId",
          "parentDefinitionType" : "OperationDefinitionParameterReferencedFrom",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "source" : {
          "serializationType" : "FieldDefinition",
          "description" : "The name of the parameter or dot-separated path of parameter names pointing to the resource parameter that is expected to contain a reference to this resource.",
          "max" : "1",
          "min" : 1,
          "name" : "source",
          "parentDefinitionType" : "OperationDefinitionParameterReferencedFrom",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "OperationOutcome" : {
      "serializationType" : "ResourceStructureType",
      "definitionType" : "OperationOutcome",
      "description" : "A collection of error, warning, or information messages that result from a system action.",
      "isAbstract" : false,
      "kind" : "resource",
      "parent" : "DomainResource",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "contained" : {
          "serializationType" : "FieldDefinition",
          "description" : "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "max" : "*",
          "min" : 0,
          "name" : "contained",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Resource",
            "type" : "Resource",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "implicitRules" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "max" : "1",
          "min" : 0,
          "name" : "implicitRules",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "issue" : {
          "serializationType" : "FieldDefinition",
          "description" : "An error, warning, or information message that results from a system action.",
          "max" : "*",
          "min" : 1,
          "name" : "issue",
          "parentDefinitionType" : "OperationOutcome",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "OperationOutcomeIssue",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The base language in which the resource is written.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "meta" : {
          "serializationType" : "FieldDefinition",
          "description" : "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "max" : "1",
          "min" : 0,
          "name" : "meta",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Meta",
            "type" : "Meta",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "text" : {
          "serializationType" : "FieldDefinition",
          "description" : "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "max" : "1",
          "min" : 0,
          "name" : "text",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Narrative",
            "type" : "Narrative",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "OperationOutcomeIssue" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "OperationOutcomeIssue",
      "description" : "Type for anonymous field contained in OperationOutcome",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.",
          "max" : "1",
          "min" : 1,
          "name" : "code",
          "parentDefinitionType" : "OperationOutcomeIssue",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "details" : {
          "serializationType" : "FieldDefinition",
          "description" : "Additional details about the error. This may be a text description of the error or a system code that identifies the error.",
          "max" : "1",
          "min" : 0,
          "name" : "details",
          "parentDefinitionType" : "OperationOutcomeIssue",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          } ]
        },
        "diagnostics" : {
          "serializationType" : "FieldDefinition",
          "description" : "Additional diagnostic information about the issue.",
          "max" : "1",
          "min" : 0,
          "name" : "diagnostics",
          "parentDefinitionType" : "OperationOutcomeIssue",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "expression" : {
          "serializationType" : "FieldDefinition",
          "description" : "A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.",
          "max" : "*",
          "min" : 0,
          "name" : "expression",
          "parentDefinitionType" : "OperationOutcomeIssue",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "location" : {
          "serializationType" : "FieldDefinition",
          "description" : "This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse. 

For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be \"http.\" + the parameter name.",
          "max" : "*",
          "min" : 0,
          "name" : "location",
          "parentDefinitionType" : "OperationOutcomeIssue",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "severity" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates whether the issue indicates a variation from successful processing.",
          "max" : "1",
          "min" : 1,
          "name" : "severity",
          "parentDefinitionType" : "OperationOutcomeIssue",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ParameterDefinition" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ParameterDefinition",
      "description" : "Base StructureDefinition for ParameterDefinition Type: The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "documentation" : {
          "serializationType" : "FieldDefinition",
          "description" : "A brief discussion of what the parameter is for and how it is used by the module.",
          "max" : "1",
          "min" : 0,
          "name" : "documentation",
          "parentDefinitionType" : "ParameterDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "max" : {
          "serializationType" : "FieldDefinition",
          "description" : "The maximum number of times this element is permitted to appear in the request or response.",
          "max" : "1",
          "min" : 0,
          "name" : "max",
          "parentDefinitionType" : "ParameterDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "min" : {
          "serializationType" : "FieldDefinition",
          "description" : "The minimum number of times this parameter SHALL appear in the request or response.",
          "max" : "1",
          "min" : 0,
          "name" : "min",
          "parentDefinitionType" : "ParameterDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "integer",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "The name of the parameter used to allow access to the value of the parameter in evaluation contexts.",
          "max" : "1",
          "min" : 0,
          "name" : "name",
          "parentDefinitionType" : "ParameterDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "profile" : {
          "serializationType" : "FieldDefinition",
          "description" : "If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.",
          "max" : "1",
          "min" : 0,
          "name" : "profile",
          "parentDefinitionType" : "ParameterDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "The type of the parameter.",
          "max" : "1",
          "min" : 1,
          "name" : "type",
          "parentDefinitionType" : "ParameterDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "use" : {
          "serializationType" : "FieldDefinition",
          "description" : "Whether the parameter is input or output for the module.",
          "max" : "1",
          "min" : 1,
          "name" : "use",
          "parentDefinitionType" : "ParameterDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Parameters" : {
      "serializationType" : "ResourceStructureType",
      "definitionType" : "Parameters",
      "description" : "This resource is a non-persisted resource used to pass information into and back from an [operation](operations.html). It has no other use, and there is no RESTful endpoint associated with it.",
      "isAbstract" : false,
      "kind" : "resource",
      "parent" : "Resource",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "implicitRules" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "max" : "1",
          "min" : 0,
          "name" : "implicitRules",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The base language in which the resource is written.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "meta" : {
          "serializationType" : "FieldDefinition",
          "description" : "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "max" : "1",
          "min" : 0,
          "name" : "meta",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Meta",
            "type" : "Meta",
            "typeGroup" : "STANDARD"
          } ]
        },
        "parameter" : {
          "serializationType" : "FieldDefinition",
          "description" : "A parameter passed to or received from the operation.",
          "max" : "*",
          "min" : 0,
          "name" : "parameter",
          "parentDefinitionType" : "Parameters",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "ParametersParameter",
            "typeGroup" : "ANONYMOUS"
          } ]
        }
      }
    },
    "ParametersParameter" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ParametersParameter",
      "description" : "Type for anonymous field contained in Parameters",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "The name of the parameter (reference to the operation definition).",
          "max" : "1",
          "min" : 1,
          "name" : "name",
          "parentDefinitionType" : "ParametersParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "part" : {
          "serializationType" : "FieldDefinition",
          "description" : "A named part of a multi-part parameter.",
          "max" : "*",
          "min" : 0,
          "name" : "part",
          "parentDefinitionType" : "ParametersParameter",
          "types" : [ {
            "isContentReferenced" : true,
            "originalType" : "BackboneElement",
            "type" : "ParametersParameter",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "resource" : {
          "serializationType" : "FieldDefinition",
          "description" : "If the parameter is a whole resource.",
          "max" : "1",
          "min" : 0,
          "name" : "resource",
          "parentDefinitionType" : "ParametersParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Resource",
            "type" : "Resource",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "Conveys the content if the parameter is a data type.",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "ParametersParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "base64Binary",
            "type" : "BoxedBase64Binary",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "BoxedBoolean",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "BoxedCanonical",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "BoxedCode",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "BoxedDate",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "BoxedDecimal",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "BoxedId",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "instant",
            "type" : "BoxedInstant",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "BoxedInteger",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "BoxedMarkdown",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "oid",
            "type" : "BoxedOid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "BoxedPositiveInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "BoxedString",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "time",
            "type" : "BoxedTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "BoxedUnsignedInt",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "BoxedUri",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "url",
            "type" : "BoxedUrl",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uuid",
            "type" : "BoxedUuid",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "DataRequirement",
            "type" : "DataRequirement",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Expression",
            "type" : "Expression",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Identifier",
            "type" : "Identifier",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "ParameterDefinition",
            "type" : "ParameterDefinition",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "Reference",
            "typeGroup" : "REFERENCE"
          }, {
            "isContentReferenced" : false,
            "originalType" : "TriggerDefinition",
            "type" : "TriggerDefinition",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Period" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Period",
      "description" : "Base StructureDefinition for Period Type: A time period defined by a start and end date and optionally time.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "end" : {
          "serializationType" : "FieldDefinition",
          "description" : "The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.",
          "max" : "1",
          "min" : 0,
          "name" : "end",
          "parentDefinitionType" : "Period",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "dateTime",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "start" : {
          "serializationType" : "FieldDefinition",
          "description" : "The start of the period. The boundary is inclusive.",
          "max" : "1",
          "min" : 0,
          "name" : "start",
          "parentDefinitionType" : "Period",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "dateTime",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Quantity" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Quantity",
      "description" : "Base StructureDefinition for Quantity Type: A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "A computer processable form of the unit in some unit representation system.",
          "max" : "1",
          "min" : 0,
          "name" : "code",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "comparator" : {
          "serializationType" : "FieldDefinition",
          "description" : "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
          "max" : "1",
          "min" : 0,
          "name" : "comparator",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "system" : {
          "serializationType" : "FieldDefinition",
          "description" : "The identification of the system that provides the coded form of the unit.",
          "max" : "1",
          "min" : 0,
          "name" : "system",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "unit" : {
          "serializationType" : "FieldDefinition",
          "description" : "A human-readable form of the unit.",
          "max" : "1",
          "min" : 0,
          "name" : "unit",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "decimal",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Range" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Range",
      "description" : "Base StructureDefinition for Range Type: A set of ordered Quantities defined by a low and high limit.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "high" : {
          "serializationType" : "FieldDefinition",
          "description" : "The high limit. The boundary is inclusive.",
          "max" : "1",
          "min" : 0,
          "name" : "high",
          "parentDefinitionType" : "Range",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Quantity",
            "type" : "Quantity",
            "typeGroup" : "STANDARD"
          } ]
        },
        "low" : {
          "serializationType" : "FieldDefinition",
          "description" : "The low limit. The boundary is inclusive.",
          "max" : "1",
          "min" : 0,
          "name" : "low",
          "parentDefinitionType" : "Range",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Quantity",
            "type" : "Quantity",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Reference" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Reference",
      "description" : "Base StructureDefinition for Reference Type: A reference from one resource to another.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "display" : {
          "serializationType" : "FieldDefinition",
          "description" : "Plain text narrative that identifies the resource in addition to the resource reference.",
          "max" : "1",
          "min" : 0,
          "name" : "display",
          "parentDefinitionType" : "Reference",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "identifier" : {
          "serializationType" : "FieldDefinition",
          "description" : "An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.",
          "max" : "1",
          "min" : 0,
          "name" : "identifier",
          "parentDefinitionType" : "Reference",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Identifier",
            "type" : "Identifier",
            "typeGroup" : "STANDARD"
          } ]
        },
        "reference" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.",
          "max" : "1",
          "min" : 0,
          "name" : "reference",
          "parentDefinitionType" : "Reference",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.

The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. \"Patient\" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).",
          "max" : "1",
          "min" : 0,
          "name" : "type",
          "parentDefinitionType" : "Reference",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Resource" : {
      "serializationType" : "ResourceStructureType",
      "definitionType" : "Resource",
      "description" : "This is the base resource type for everything.",
      "isAbstract" : true,
      "kind" : "resource",
      "parent" : "",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "implicitRules" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "max" : "1",
          "min" : 0,
          "name" : "implicitRules",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The base language in which the resource is written.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "meta" : {
          "serializationType" : "FieldDefinition",
          "description" : "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "max" : "1",
          "min" : 0,
          "name" : "meta",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Meta",
            "type" : "Meta",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "SimpleQuantity" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "SimpleQuantity",
      "description" : "A fixed quantity (no comparator)",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Quantity",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "A computer processable form of the unit in some unit representation system.",
          "max" : "1",
          "min" : 0,
          "name" : "code",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "comparator" : {
          "serializationType" : "FieldDefinition",
          "description" : "Not allowed to be used in this context",
          "max" : "0",
          "min" : 0,
          "name" : "comparator",
          "parentDefinitionType" : "SimpleQuantity",
          "types" : [ ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "system" : {
          "serializationType" : "FieldDefinition",
          "description" : "The identification of the system that provides the coded form of the unit.",
          "max" : "1",
          "min" : 0,
          "name" : "system",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "unit" : {
          "serializationType" : "FieldDefinition",
          "description" : "A human-readable form of the unit.",
          "max" : "1",
          "min" : 0,
          "name" : "unit",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "Quantity",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "decimal",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "StructureDefinition" : {
      "serializationType" : "ResourceStructureType",
      "definitionType" : "StructureDefinition",
      "description" : "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.",
      "isAbstract" : false,
      "kind" : "resource",
      "parent" : "DomainResource",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "abstract" : {
          "serializationType" : "FieldDefinition",
          "description" : "Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.",
          "max" : "1",
          "min" : 1,
          "name" : "abstract",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "baseDefinition" : {
          "serializationType" : "FieldDefinition",
          "description" : "An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.",
          "max" : "1",
          "min" : 0,
          "name" : "baseDefinition",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "baseDefinitionReference" : {
          "serializationType" : "FieldDefinition",
          "description" : "A Reference to StructureDefinition that is the base structure from which this type is derived, either by specialization or constraint.",
          "max" : "1",
          "min" : 0,
          "name" : "baseDefinitionReference",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Reference",
            "type" : "StructureDefinition",
            "typeGroup" : "REFERENCE"
          } ]
        },
        "contained" : {
          "serializationType" : "FieldDefinition",
          "description" : "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "max" : "*",
          "min" : 0,
          "name" : "contained",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Resource",
            "type" : "Resource",
            "typeGroup" : "STANDARD"
          } ]
        },
        "context" : {
          "serializationType" : "FieldDefinition",
          "description" : "Identifies the types of resource or data type elements to which the extension can be applied.",
          "max" : "*",
          "min" : 0,
          "name" : "context",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "StructureDefinitionContext",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "contextInvariant" : {
          "serializationType" : "FieldDefinition",
          "description" : "A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.",
          "max" : "*",
          "min" : 0,
          "name" : "contextInvariant",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "copyright" : {
          "serializationType" : "FieldDefinition",
          "description" : "A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.",
          "max" : "1",
          "min" : 0,
          "name" : "copyright",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "date" : {
          "serializationType" : "FieldDefinition",
          "description" : "The date  (and optionally time) when the structure definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.",
          "max" : "1",
          "min" : 0,
          "name" : "date",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "dateTime",
            "typeGroup" : "STANDARD"
          } ]
        },
        "derivation" : {
          "serializationType" : "FieldDefinition",
          "description" : "How the type relates to the baseDefinition.",
          "max" : "1",
          "min" : 0,
          "name" : "derivation",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "description" : {
          "serializationType" : "FieldDefinition",
          "description" : "A free text natural language description of the structure definition from a consumer's perspective.",
          "max" : "1",
          "min" : 0,
          "name" : "description",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "differential" : {
          "serializationType" : "FieldDefinition",
          "description" : "A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.",
          "max" : "1",
          "min" : 0,
          "name" : "differential",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "StructureDefinitionDifferential",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "experimental" : {
          "serializationType" : "FieldDefinition",
          "description" : "A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
          "max" : "1",
          "min" : 0,
          "name" : "experimental",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "fhirVersion" : {
          "serializationType" : "FieldDefinition",
          "description" : "The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.3.0 for this version.",
          "max" : "1",
          "min" : 0,
          "name" : "fhirVersion",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "identifier" : {
          "serializationType" : "FieldDefinition",
          "description" : "A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.",
          "max" : "*",
          "min" : 0,
          "name" : "identifier",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Identifier",
            "type" : "Identifier",
            "typeGroup" : "STANDARD"
          } ]
        },
        "implicitRules" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "max" : "1",
          "min" : 0,
          "name" : "implicitRules",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "jurisdiction" : {
          "serializationType" : "FieldDefinition",
          "description" : "A legal or geographic region in which the structure definition is intended to be used.",
          "max" : "*",
          "min" : 0,
          "name" : "jurisdiction",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          } ]
        },
        "keyword" : {
          "serializationType" : "FieldDefinition",
          "description" : "A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.",
          "max" : "*",
          "min" : 0,
          "name" : "keyword",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          } ]
        },
        "kind" : {
          "serializationType" : "FieldDefinition",
          "description" : "Defines the kind of structure that this definition is describing.",
          "max" : "1",
          "min" : 1,
          "name" : "kind",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The base language in which the resource is written.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "mapping" : {
          "serializationType" : "FieldDefinition",
          "description" : "An external specification that the content is mapped to.",
          "max" : "*",
          "min" : 0,
          "name" : "mapping",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "StructureDefinitionMapping",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "meta" : {
          "serializationType" : "FieldDefinition",
          "description" : "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "max" : "1",
          "min" : 0,
          "name" : "meta",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Meta",
            "type" : "Meta",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "max" : "1",
          "min" : 1,
          "name" : "name",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "publisher" : {
          "serializationType" : "FieldDefinition",
          "description" : "The name of the organization or individual that published the structure definition.",
          "max" : "1",
          "min" : 0,
          "name" : "publisher",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "purpose" : {
          "serializationType" : "FieldDefinition",
          "description" : "Explanation of why this structure definition is needed and why it has been designed as it has.",
          "max" : "1",
          "min" : 0,
          "name" : "purpose",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "snapshot" : {
          "serializationType" : "FieldDefinition",
          "description" : "A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.",
          "max" : "1",
          "min" : 0,
          "name" : "snapshot",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "StructureDefinitionSnapshot",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "status" : {
          "serializationType" : "FieldDefinition",
          "description" : "The status of this structure definition. Enables tracking the life-cycle of the content.",
          "max" : "1",
          "min" : 1,
          "name" : "status",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "text" : {
          "serializationType" : "FieldDefinition",
          "description" : "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "max" : "1",
          "min" : 0,
          "name" : "text",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Narrative",
            "type" : "Narrative",
            "typeGroup" : "STANDARD"
          } ]
        },
        "title" : {
          "serializationType" : "FieldDefinition",
          "description" : "A short, descriptive, user-friendly title for the structure definition.",
          "max" : "1",
          "min" : 0,
          "name" : "title",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).  References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.",
          "max" : "1",
          "min" : 1,
          "name" : "type",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "url" : {
          "serializationType" : "FieldDefinition",
          "description" : "An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers.",
          "max" : "1",
          "min" : 1,
          "name" : "url",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "useContext" : {
          "serializationType" : "FieldDefinition",
          "description" : "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.",
          "max" : "*",
          "min" : 0,
          "name" : "useContext",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "UsageContext",
            "type" : "UsageContext",
            "typeGroup" : "STANDARD"
          } ]
        },
        "version" : {
          "serializationType" : "FieldDefinition",
          "description" : "The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
          "max" : "1",
          "min" : 0,
          "name" : "version",
          "parentDefinitionType" : "StructureDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "StructureDefinitionContext" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "StructureDefinitionContext",
      "description" : "Type for anonymous field contained in StructureDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "expression" : {
          "serializationType" : "FieldDefinition",
          "description" : "An expression that defines where an extension can be used in resources.",
          "max" : "1",
          "min" : 1,
          "name" : "expression",
          "parentDefinitionType" : "StructureDefinitionContext",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "Defines how to interpret the expression that defines what the context of the extension is.",
          "max" : "1",
          "min" : 1,
          "name" : "type",
          "parentDefinitionType" : "StructureDefinitionContext",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "StructureDefinitionDifferential" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "StructureDefinitionDifferential",
      "description" : "Type for anonymous field contained in StructureDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "element" : {
          "serializationType" : "FieldDefinition",
          "description" : "Captures constraints on each element within the resource.",
          "max" : "*",
          "min" : 1,
          "name" : "element",
          "parentDefinitionType" : "StructureDefinitionDifferential",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "ElementDefinition",
            "type" : "ElementDefinition",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "StructureDefinitionMapping" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "StructureDefinitionMapping",
      "description" : "Type for anonymous field contained in StructureDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "comment" : {
          "serializationType" : "FieldDefinition",
          "description" : "Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.",
          "max" : "1",
          "min" : 0,
          "name" : "comment",
          "parentDefinitionType" : "StructureDefinitionMapping",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "identity" : {
          "serializationType" : "FieldDefinition",
          "description" : "An Internal id that is used to identify this mapping set when specific mappings are made.",
          "max" : "1",
          "min" : 1,
          "name" : "identity",
          "parentDefinitionType" : "StructureDefinitionMapping",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "id",
            "type" : "id",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "A name for the specification that is being mapped to.",
          "max" : "1",
          "min" : 0,
          "name" : "name",
          "parentDefinitionType" : "StructureDefinitionMapping",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "uri" : {
          "serializationType" : "FieldDefinition",
          "description" : "An absolute URI that identifies the specification that this mapping is expressed to.",
          "max" : "1",
          "min" : 0,
          "name" : "uri",
          "parentDefinitionType" : "StructureDefinitionMapping",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "StructureDefinitionSnapshot" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "StructureDefinitionSnapshot",
      "description" : "Type for anonymous field contained in StructureDefinition",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "element" : {
          "serializationType" : "FieldDefinition",
          "description" : "Captures constraints on each element within the resource.",
          "max" : "*",
          "min" : 1,
          "name" : "element",
          "parentDefinitionType" : "StructureDefinitionSnapshot",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "ElementDefinition",
            "type" : "ElementDefinition",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "Timing" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "Timing",
      "description" : "Base StructureDefinition for Timing Type: Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).",
          "max" : "1",
          "min" : 0,
          "name" : "code",
          "parentDefinitionType" : "Timing",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          } ]
        },
        "event" : {
          "serializationType" : "FieldDefinition",
          "description" : "Identifies specific times when the event occurs.",
          "max" : "*",
          "min" : 0,
          "name" : "event",
          "parentDefinitionType" : "Timing",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "dateTime",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "repeat" : {
          "serializationType" : "FieldDefinition",
          "description" : "A set of rules that describe when the event is scheduled.",
          "max" : "1",
          "min" : 0,
          "name" : "repeat",
          "parentDefinitionType" : "Timing",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Element",
            "type" : "TimingRepeat",
            "typeGroup" : "ANONYMOUS"
          } ]
        }
      }
    },
    "TimingRepeat" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "TimingRepeat",
      "description" : "Type for anonymous field contained in Timing",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "bounds" : {
          "serializationType" : "FieldDefinition",
          "description" : "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
          "max" : "1",
          "min" : 0,
          "name" : "bounds",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Duration",
            "type" : "Duration",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Period",
            "type" : "Period",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Range",
            "type" : "Range",
            "typeGroup" : "STANDARD"
          } ]
        },
        "count" : {
          "serializationType" : "FieldDefinition",
          "description" : "A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.",
          "max" : "1",
          "min" : 0,
          "name" : "count",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "positiveInt",
            "typeGroup" : "STANDARD"
          } ]
        },
        "countMax" : {
          "serializationType" : "FieldDefinition",
          "description" : "If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.",
          "max" : "1",
          "min" : 0,
          "name" : "countMax",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "positiveInt",
            "typeGroup" : "STANDARD"
          } ]
        },
        "dayOfWeek" : {
          "serializationType" : "FieldDefinition",
          "description" : "If one or more days of week is provided, then the action happens only on the specified day(s).",
          "max" : "*",
          "min" : 0,
          "name" : "dayOfWeek",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "duration" : {
          "serializationType" : "FieldDefinition",
          "description" : "How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.",
          "max" : "1",
          "min" : 0,
          "name" : "duration",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "decimal",
            "typeGroup" : "STANDARD"
          } ]
        },
        "durationMax" : {
          "serializationType" : "FieldDefinition",
          "description" : "If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.",
          "max" : "1",
          "min" : 0,
          "name" : "durationMax",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "decimal",
            "typeGroup" : "STANDARD"
          } ]
        },
        "durationUnit" : {
          "serializationType" : "FieldDefinition",
          "description" : "The units of time for the duration, in UCUM units.",
          "max" : "1",
          "min" : 0,
          "name" : "durationUnit",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "frequency" : {
          "serializationType" : "FieldDefinition",
          "description" : "The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.",
          "max" : "1",
          "min" : 0,
          "name" : "frequency",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "positiveInt",
            "typeGroup" : "STANDARD"
          } ]
        },
        "frequencyMax" : {
          "serializationType" : "FieldDefinition",
          "description" : "If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.",
          "max" : "1",
          "min" : 0,
          "name" : "frequencyMax",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "positiveInt",
            "type" : "positiveInt",
            "typeGroup" : "STANDARD"
          } ]
        },
        "offset" : {
          "serializationType" : "FieldDefinition",
          "description" : "The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.",
          "max" : "1",
          "min" : 0,
          "name" : "offset",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "unsignedInt",
            "type" : "unsignedInt",
            "typeGroup" : "STANDARD"
          } ]
        },
        "period" : {
          "serializationType" : "FieldDefinition",
          "description" : "Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 times per day\", 3 would be the frequency and \"1 day\" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.",
          "max" : "1",
          "min" : 0,
          "name" : "period",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "decimal",
            "typeGroup" : "STANDARD"
          } ]
        },
        "periodMax" : {
          "serializationType" : "FieldDefinition",
          "description" : "If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as \"do this once every 3-5 days.",
          "max" : "1",
          "min" : 0,
          "name" : "periodMax",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "decimal",
            "typeGroup" : "STANDARD"
          } ]
        },
        "periodUnit" : {
          "serializationType" : "FieldDefinition",
          "description" : "The units of time for the period in UCUM units.",
          "max" : "1",
          "min" : 0,
          "name" : "periodUnit",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "timeOfDay" : {
          "serializationType" : "FieldDefinition",
          "description" : "Specified time of day for action to take place.",
          "max" : "*",
          "min" : 0,
          "name" : "timeOfDay",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "time",
            "type" : "time",
            "typeGroup" : "STANDARD"
          } ]
        },
        "when" : {
          "serializationType" : "FieldDefinition",
          "description" : "An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.",
          "max" : "*",
          "min" : 0,
          "name" : "when",
          "parentDefinitionType" : "TimingRepeat",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "TriggerDefinition" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "TriggerDefinition",
      "description" : "Base StructureDefinition for TriggerDefinition Type: A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "condition" : {
          "serializationType" : "FieldDefinition",
          "description" : "A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.",
          "max" : "1",
          "min" : 0,
          "name" : "condition",
          "parentDefinitionType" : "TriggerDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Expression",
            "type" : "Expression",
            "typeGroup" : "STANDARD"
          } ]
        },
        "data" : {
          "serializationType" : "FieldDefinition",
          "description" : "The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.",
          "max" : "*",
          "min" : 0,
          "name" : "data",
          "parentDefinitionType" : "TriggerDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "DataRequirement",
            "type" : "DataRequirement",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.",
          "max" : "1",
          "min" : 0,
          "name" : "name",
          "parentDefinitionType" : "TriggerDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "timing" : {
          "serializationType" : "FieldDefinition",
          "description" : "The timing of the event (if this is a periodic trigger).",
          "max" : "1",
          "min" : 0,
          "name" : "timing",
          "parentDefinitionType" : "TriggerDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "BoxedDate",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Timing",
            "type" : "Timing",
            "typeGroup" : "STANDARD"
          } ]
        },
        "type" : {
          "serializationType" : "FieldDefinition",
          "description" : "The type of triggering event.",
          "max" : "1",
          "min" : 1,
          "name" : "type",
          "parentDefinitionType" : "TriggerDefinition",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "UsageContext" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "UsageContext",
      "description" : "Base StructureDefinition for UsageContext Type: Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "Element",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "A code that identifies the type of context being specified by this usage context.",
          "max" : "1",
          "min" : 1,
          "name" : "code",
          "parentDefinitionType" : "UsageContext",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
          "max" : "1",
          "min" : 1,
          "name" : "value",
          "parentDefinitionType" : "UsageContext",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Quantity",
            "type" : "Quantity",
            "typeGroup" : "STANDARD"
          }, {
            "isContentReferenced" : false,
            "originalType" : "Range",
            "type" : "Range",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ValueSet" : {
      "serializationType" : "ResourceStructureType",
      "definitionType" : "ValueSet",
      "description" : "A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [[[CodeSystem]]] definitions and their use in [coded elements](terminologies.html).",
      "isAbstract" : false,
      "kind" : "resource",
      "parent" : "DomainResource",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "compose" : {
          "serializationType" : "FieldDefinition",
          "description" : "A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).",
          "max" : "1",
          "min" : 0,
          "name" : "compose",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "ValueSetCompose",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "contact" : {
          "serializationType" : "FieldDefinition",
          "description" : "Contact details to assist a user in finding and communicating with the publisher.",
          "max" : "*",
          "min" : 0,
          "name" : "contact",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "ContactDetail",
            "type" : "ContactDetail",
            "typeGroup" : "STANDARD"
          } ]
        },
        "contained" : {
          "serializationType" : "FieldDefinition",
          "description" : "These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.",
          "max" : "*",
          "min" : 0,
          "name" : "contained",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Resource",
            "type" : "Resource",
            "typeGroup" : "STANDARD"
          } ]
        },
        "copyright" : {
          "serializationType" : "FieldDefinition",
          "description" : "A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.",
          "max" : "1",
          "min" : 0,
          "name" : "copyright",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "date" : {
          "serializationType" : "FieldDefinition",
          "description" : "The date (and optionally time) when the value set was created or revised (e.g. the 'content logical definition').",
          "max" : "1",
          "min" : 0,
          "name" : "date",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "dateTime",
            "typeGroup" : "STANDARD"
          } ]
        },
        "description" : {
          "serializationType" : "FieldDefinition",
          "description" : "A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.",
          "max" : "1",
          "min" : 0,
          "name" : "description",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "expansion" : {
          "serializationType" : "FieldDefinition",
          "description" : "A value set can also be \"expanded\", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.",
          "max" : "1",
          "min" : 0,
          "name" : "expansion",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "ValueSetExpansion",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "experimental" : {
          "serializationType" : "FieldDefinition",
          "description" : "A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
          "max" : "1",
          "min" : 0,
          "name" : "experimental",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "identifier" : {
          "serializationType" : "FieldDefinition",
          "description" : "A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.",
          "max" : "*",
          "min" : 0,
          "name" : "identifier",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Identifier",
            "type" : "Identifier",
            "typeGroup" : "STANDARD"
          } ]
        },
        "immutable" : {
          "serializationType" : "FieldDefinition",
          "description" : "If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.",
          "max" : "1",
          "min" : 0,
          "name" : "immutable",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "implicitRules" : {
          "serializationType" : "FieldDefinition",
          "description" : "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.",
          "max" : "1",
          "min" : 0,
          "name" : "implicitRules",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "jurisdiction" : {
          "serializationType" : "FieldDefinition",
          "description" : "A legal or geographic region in which the value set is intended to be used.",
          "max" : "*",
          "min" : 0,
          "name" : "jurisdiction",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "CodeableConcept",
            "type" : "CodeableConcept",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The base language in which the resource is written.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "meta" : {
          "serializationType" : "FieldDefinition",
          "description" : "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
          "max" : "1",
          "min" : 0,
          "name" : "meta",
          "parentDefinitionType" : "Resource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Meta",
            "type" : "Meta",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
          "max" : "1",
          "min" : 0,
          "name" : "name",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "publisher" : {
          "serializationType" : "FieldDefinition",
          "description" : "The name of the organization or individual that published the value set.",
          "max" : "1",
          "min" : 0,
          "name" : "publisher",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "purpose" : {
          "serializationType" : "FieldDefinition",
          "description" : "Explanation of why this value set is needed and why it has been designed as it has.",
          "max" : "1",
          "min" : 0,
          "name" : "purpose",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "markdown",
            "type" : "markdown",
            "typeGroup" : "STANDARD"
          } ]
        },
        "status" : {
          "serializationType" : "FieldDefinition",
          "description" : "The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.",
          "max" : "1",
          "min" : 1,
          "name" : "status",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "text" : {
          "serializationType" : "FieldDefinition",
          "description" : "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
          "max" : "1",
          "min" : 0,
          "name" : "text",
          "parentDefinitionType" : "DomainResource",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Narrative",
            "type" : "Narrative",
            "typeGroup" : "STANDARD"
          } ]
        },
        "title" : {
          "serializationType" : "FieldDefinition",
          "description" : "A short, descriptive, user-friendly title for the value set.",
          "max" : "1",
          "min" : 0,
          "name" : "title",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "url" : {
          "serializationType" : "FieldDefinition",
          "description" : "An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.",
          "max" : "1",
          "min" : 0,
          "name" : "url",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "useContext" : {
          "serializationType" : "FieldDefinition",
          "description" : "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.",
          "max" : "*",
          "min" : 0,
          "name" : "useContext",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "UsageContext",
            "type" : "UsageContext",
            "typeGroup" : "STANDARD"
          } ]
        },
        "version" : {
          "serializationType" : "FieldDefinition",
          "description" : "The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.",
          "max" : "1",
          "min" : 0,
          "name" : "version",
          "parentDefinitionType" : "ValueSet",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ValueSetCompose" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ValueSetCompose",
      "description" : "Type for anonymous field contained in ValueSet",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "exclude" : {
          "serializationType" : "FieldDefinition",
          "description" : "Exclude one or more codes from the value set based on code system filters and/or other value sets.",
          "max" : "*",
          "min" : 0,
          "name" : "exclude",
          "parentDefinitionType" : "ValueSetCompose",
          "types" : [ {
            "isContentReferenced" : true,
            "originalType" : "BackboneElement",
            "type" : "ValueSetComposeInclude",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "inactive" : {
          "serializationType" : "FieldDefinition",
          "description" : "Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).",
          "max" : "1",
          "min" : 0,
          "name" : "inactive",
          "parentDefinitionType" : "ValueSetCompose",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "include" : {
          "serializationType" : "FieldDefinition",
          "description" : "Include one or more codes from a code system or other value set(s).",
          "max" : "*",
          "min" : 1,
          "name" : "include",
          "parentDefinitionType" : "ValueSetCompose",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "ValueSetComposeInclude",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "lockedDate" : {
          "serializationType" : "FieldDefinition",
          "description" : "The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.",
          "max" : "1",
          "min" : 0,
          "name" : "lockedDate",
          "parentDefinitionType" : "ValueSetCompose",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "date",
            "type" : "date",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ValueSetComposeInclude" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ValueSetComposeInclude",
      "description" : "Type for anonymous field contained in ValueSet",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "concept" : {
          "serializationType" : "FieldDefinition",
          "description" : "Specifies a concept to be included or excluded.",
          "max" : "*",
          "min" : 0,
          "name" : "concept",
          "parentDefinitionType" : "ValueSetComposeInclude",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "ValueSetComposeIncludeConcept",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "filter" : {
          "serializationType" : "FieldDefinition",
          "description" : "Select concepts by specify a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified, they SHALL all be true.",
          "max" : "*",
          "min" : 0,
          "name" : "filter",
          "parentDefinitionType" : "ValueSetComposeInclude",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "ValueSetComposeIncludeFilter",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "system" : {
          "serializationType" : "FieldDefinition",
          "description" : "An absolute URI which is the code system from which the selected codes come from.",
          "max" : "1",
          "min" : 0,
          "name" : "system",
          "parentDefinitionType" : "ValueSetComposeInclude",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "valueSet" : {
          "serializationType" : "FieldDefinition",
          "description" : "Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the union of the contents of all of the referenced value sets.",
          "max" : "*",
          "min" : 0,
          "name" : "valueSet",
          "parentDefinitionType" : "ValueSetComposeInclude",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "canonical",
            "type" : "canonical",
            "typeGroup" : "STANDARD"
          } ]
        },
        "version" : {
          "serializationType" : "FieldDefinition",
          "description" : "The version of the code system that the codes are selected from, or the special version '*' for all versions.",
          "max" : "1",
          "min" : 0,
          "name" : "version",
          "parentDefinitionType" : "ValueSetComposeInclude",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ValueSetComposeIncludeConcept" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ValueSetComposeIncludeConcept",
      "description" : "Type for anonymous field contained in ValueSet",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "Specifies a code for the concept to be included or excluded.",
          "max" : "1",
          "min" : 1,
          "name" : "code",
          "parentDefinitionType" : "ValueSetComposeIncludeConcept",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "designation" : {
          "serializationType" : "FieldDefinition",
          "description" : "Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.",
          "max" : "*",
          "min" : 0,
          "name" : "designation",
          "parentDefinitionType" : "ValueSetComposeIncludeConcept",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "ValueSetComposeIncludeConceptDesignation",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "display" : {
          "serializationType" : "FieldDefinition",
          "description" : "The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.",
          "max" : "1",
          "min" : 0,
          "name" : "display",
          "parentDefinitionType" : "ValueSetComposeIncludeConcept",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ValueSetComposeIncludeConceptDesignation" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ValueSetComposeIncludeConceptDesignation",
      "description" : "Type for anonymous field contained in ValueSet",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "language" : {
          "serializationType" : "FieldDefinition",
          "description" : "The language this designation is defined for.",
          "max" : "1",
          "min" : 0,
          "name" : "language",
          "parentDefinitionType" : "ValueSetComposeIncludeConceptDesignation",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "use" : {
          "serializationType" : "FieldDefinition",
          "description" : "A code that represents types of uses of designations.",
          "max" : "1",
          "min" : 0,
          "name" : "use",
          "parentDefinitionType" : "ValueSetComposeIncludeConceptDesignation",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Coding",
            "type" : "Coding",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "The text value for this designation.",
          "max" : "1",
          "min" : 1,
          "name" : "value",
          "parentDefinitionType" : "ValueSetComposeIncludeConceptDesignation",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ValueSetComposeIncludeFilter" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ValueSetComposeIncludeFilter",
      "description" : "Type for anonymous field contained in ValueSet",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "op" : {
          "serializationType" : "FieldDefinition",
          "description" : "The kind of operation to perform as a part of the filter criteria.",
          "max" : "1",
          "min" : 1,
          "name" : "op",
          "parentDefinitionType" : "ValueSetComposeIncludeFilter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "property" : {
          "serializationType" : "FieldDefinition",
          "description" : "A code that identifies a property or a filter defined in the code system.",
          "max" : "1",
          "min" : 1,
          "name" : "property",
          "parentDefinitionType" : "ValueSetComposeIncludeFilter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.",
          "max" : "1",
          "min" : 1,
          "name" : "value",
          "parentDefinitionType" : "ValueSetComposeIncludeFilter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ValueSetExpansion" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ValueSetExpansion",
      "description" : "Type for anonymous field contained in ValueSet",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "contains" : {
          "serializationType" : "FieldDefinition",
          "description" : "The codes that are contained in the value set expansion.",
          "max" : "*",
          "min" : 0,
          "name" : "contains",
          "parentDefinitionType" : "ValueSetExpansion",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "ValueSetExpansionContains",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "identifier" : {
          "serializationType" : "FieldDefinition",
          "description" : "An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.",
          "max" : "1",
          "min" : 0,
          "name" : "identifier",
          "parentDefinitionType" : "ValueSetExpansion",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "offset" : {
          "serializationType" : "FieldDefinition",
          "description" : "If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.",
          "max" : "1",
          "min" : 0,
          "name" : "offset",
          "parentDefinitionType" : "ValueSetExpansion",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "integer",
            "typeGroup" : "STANDARD"
          } ]
        },
        "parameter" : {
          "serializationType" : "FieldDefinition",
          "description" : "A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.",
          "max" : "*",
          "min" : 0,
          "name" : "parameter",
          "parentDefinitionType" : "ValueSetExpansion",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "BackboneElement",
            "type" : "ValueSetExpansionParameter",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "timestamp" : {
          "serializationType" : "FieldDefinition",
          "description" : "The time at which the expansion was produced by the expanding system.",
          "max" : "1",
          "min" : 1,
          "name" : "timestamp",
          "parentDefinitionType" : "ValueSetExpansion",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "dateTime",
            "typeGroup" : "STANDARD"
          } ]
        },
        "total" : {
          "serializationType" : "FieldDefinition",
          "description" : "The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.",
          "max" : "1",
          "min" : 0,
          "name" : "total",
          "parentDefinitionType" : "ValueSetExpansion",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "integer",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ValueSetExpansionContains" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ValueSetExpansionContains",
      "description" : "Type for anonymous field contained in ValueSet",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "abstract" : {
          "serializationType" : "FieldDefinition",
          "description" : "If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.",
          "max" : "1",
          "min" : 0,
          "name" : "abstract",
          "parentDefinitionType" : "ValueSetExpansionContains",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "code" : {
          "serializationType" : "FieldDefinition",
          "description" : "The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.",
          "max" : "1",
          "min" : 0,
          "name" : "code",
          "parentDefinitionType" : "ValueSetExpansionContains",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "code",
            "typeGroup" : "STANDARD"
          } ]
        },
        "contains" : {
          "serializationType" : "FieldDefinition",
          "description" : "Other codes and entries contained under this entry in the hierarchy.",
          "max" : "*",
          "min" : 0,
          "name" : "contains",
          "parentDefinitionType" : "ValueSetExpansionContains",
          "types" : [ {
            "isContentReferenced" : true,
            "originalType" : "BackboneElement",
            "type" : "ValueSetExpansionContains",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "designation" : {
          "serializationType" : "FieldDefinition",
          "description" : "Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.",
          "max" : "*",
          "min" : 0,
          "name" : "designation",
          "parentDefinitionType" : "ValueSetExpansionContains",
          "types" : [ {
            "isContentReferenced" : true,
            "originalType" : "BackboneElement",
            "type" : "ValueSetComposeIncludeConceptDesignation",
            "typeGroup" : "ANONYMOUS"
          } ]
        },
        "display" : {
          "serializationType" : "FieldDefinition",
          "description" : "The recommended display for this item in the expansion.",
          "max" : "1",
          "min" : 0,
          "name" : "display",
          "parentDefinitionType" : "ValueSetExpansionContains",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "inactive" : {
          "serializationType" : "FieldDefinition",
          "description" : "If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether an concept is inactive (and it may depend on the context of use).",
          "max" : "1",
          "min" : 0,
          "name" : "inactive",
          "parentDefinitionType" : "ValueSetExpansionContains",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "boolean",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "system" : {
          "serializationType" : "FieldDefinition",
          "description" : "An absolute URI which is the code system in which the code for this item in the expansion is defined.",
          "max" : "1",
          "min" : 0,
          "name" : "system",
          "parentDefinitionType" : "ValueSetExpansionContains",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "uri",
            "typeGroup" : "STANDARD"
          } ]
        },
        "version" : {
          "serializationType" : "FieldDefinition",
          "description" : "The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
          "max" : "1",
          "min" : 0,
          "name" : "version",
          "parentDefinitionType" : "ValueSetExpansionContains",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        }
      }
    },
    "ValueSetExpansionParameter" : {
      "serializationType" : "ComplexStructureType",
      "definitionType" : "ValueSetExpansionParameter",
      "description" : "Type for anonymous field contained in ValueSet",
      "isAbstract" : false,
      "kind" : "complex-type",
      "parent" : "BackboneElement",
      "fields" : {
        "id" : {
          "serializationType" : "FieldDefinition",
          "description" : "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "max" : "1",
          "min" : 0,
          "name" : "id",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "extension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "max" : "*",
          "min" : 0,
          "name" : "extension",
          "parentDefinitionType" : "Element",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "modifierExtension" : {
          "serializationType" : "FieldDefinition",
          "description" : "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "max" : "*",
          "min" : 0,
          "name" : "modifierExtension",
          "parentDefinitionType" : "BackboneElement",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "Extension",
            "type" : "Extension",
            "typeGroup" : "STANDARD"
          } ]
        },
        "name" : {
          "serializationType" : "FieldDefinition",
          "description" : "Name of the input parameter to the $expand operation; may be a server-assigned name for additional default or other server-supplied parameters used to control the expansion process.",
          "max" : "1",
          "min" : 1,
          "name" : "name",
          "parentDefinitionType" : "ValueSetExpansionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "string",
            "typeGroup" : "STANDARD"
          } ]
        },
        "value" : {
          "serializationType" : "FieldDefinition",
          "description" : "The value of the parameter.",
          "max" : "1",
          "min" : 0,
          "name" : "value",
          "parentDefinitionType" : "ValueSetExpansionParameter",
          "types" : [ {
            "isContentReferenced" : false,
            "originalType" : "boolean",
            "type" : "BoxedBoolean",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "code",
            "type" : "BoxedCode",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "dateTime",
            "type" : "BoxedDateTime",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "decimal",
            "type" : "BoxedDecimal",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "integer",
            "type" : "BoxedInteger",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "string",
            "type" : "BoxedString",
            "typeGroup" : "BOXED"
          }, {
            "isContentReferenced" : false,
            "originalType" : "uri",
            "type" : "BoxedUri",
            "typeGroup" : "BOXED"
          } ]
        }
      }
    },
    "base64Binary" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "base64Binary",
      "description" : "Base StructureDefinition for base64Binary Type: A stream of bytes",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    },
    "boolean" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "boolean",
      "description" : "Base StructureDefinition for boolean Type: Value of \"true\" or \"false\"",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    },
    "canonical" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "canonical",
      "description" : "Base StructureDefinition for canonical type: A URI that is a reference to a canonical URL on a FHIR resource",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "uri"
    },
    "code" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "code",
      "description" : "Base StructureDefinition for code type: A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "string"
    },
    "date" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "date",
      "description" : "Base StructureDefinition for date Type: A date or partial date (e.g. just year or year + month). There is no time zone. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    },
    "dateTime" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "dateTime",
      "description" : "Base StructureDefinition for dateTime Type: A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    },
    "decimal" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "decimal",
      "description" : "Base StructureDefinition for decimal Type: A rational number with implicit precision",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    },
    "instant" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "instant",
      "description" : "Base StructureDefinition for instant Type: An instant in time - known at least to the second",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    },
    "integer" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "integer",
      "description" : "Base StructureDefinition for integer Type: A whole number",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    },
    "markdown" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "markdown",
      "description" : "Base StructureDefinition for markdown type: A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "string"
    },
    "oid" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "oid",
      "description" : "Base StructureDefinition for oid type: An OID represented as a URI",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "uri"
    },
    "positiveInt" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "positiveInt",
      "description" : "Base StructureDefinition for positiveInt type: An integer with a value that is positive (e.g. >0)",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "integer"
    },
    "string" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "string",
      "description" : "Base StructureDefinition for string Type: A sequence of Unicode characters",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    },
    "time" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "time",
      "description" : "Base StructureDefinition for time Type: A time during the day, with no date specified",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    },
    "unsignedInt" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "unsignedInt",
      "description" : "Base StructureDefinition for unsignedInt type: An integer with a value that is not negative (e.g. >= 0)",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "integer"
    },
    "uri" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "uri",
      "description" : "Base StructureDefinition for uri Type: String of characters used to identify a name or a resource",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    },
    "url" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "url",
      "description" : "Base StructureDefinition for url type: A URI that is a literal reference",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "uri"
    },
    "uuid" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "uuid",
      "description" : "Base StructureDefinition for uuid type: A UUID, represented as a URI",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "uri"
    },
    "xhtml" : {
      "serializationType" : "PrimitiveStructureType",
      "definitionType" : "xhtml",
      "description" : "Base StructureDefinition for xhtml Type",
      "isAbstract" : false,
      "kind" : "primitive-type",
      "parent" : "Element"
    }
  }
}